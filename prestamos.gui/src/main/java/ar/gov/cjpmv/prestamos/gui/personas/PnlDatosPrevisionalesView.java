/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PnlDatosPrevisionalesView.java
 *
 * Created on 03/01/2010, 00:17:25
 */

package ar.gov.cjpmv.prestamos.gui.personas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javassist.expr.NewArray;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;



import ar.gov.cjpmv.prestamos.core.business.exceptions.LogicaException;
import ar.gov.cjpmv.prestamos.core.persistence.PersonaFisica;
import ar.gov.cjpmv.prestamos.core.persistence.TipoBeneficio;
import ar.gov.cjpmv.prestamos.core.persistence.enums.EstadoPersonaFisica;
import ar.gov.cjpmv.prestamos.core.persistence.enums.SituacionRevista;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.Beneficio;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.Jubilacion;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.Pension;
import ar.gov.cjpmv.prestamos.gui.AdministracionFactory;
import ar.gov.cjpmv.prestamos.gui.personas.controllers.BusquedaPersonaFisicaController;
import ar.gov.cjpmv.prestamos.gui.personas.controllers.BusquedaPersonaJuridicaController;
import ar.gov.cjpmv.prestamos.gui.personas.model.AMPersonaFisicaModel;
import ar.gov.cjpmv.prestamos.gui.personas.model.EstadoPersonaFisicaCellRenderer;
import ar.gov.cjpmv.prestamos.gui.personas.model.SituacionRevistaListCellRenderer;
import ar.gov.cjpmv.prestamos.gui.personas.model.TblBeneficioModel;
import ar.gov.cjpmv.prestamos.gui.usuarios.model.TblModulosPermitidos;
import ar.gov.cjpmv.prestamos.gui.utiles.Utiles;

/**
 *
 * @author daiana
 */
public class PnlDatosPrevisionalesView extends javax.swing.JPanel {

	private JDialog padre;
	private PersonaFisica persona;
	private List<Beneficio> listaBeneficio;
	private TblBeneficioModel tblModeloBeneficio;
	private AdministracionFactory adminFactory;
	
	private BusquedaPersonaFisicaController busquedaPersonaFisica;
	
	private TipoBeneficio tipoBeneficio;
	private PersonaFisica causante;
	private Date fechaOtorgamiento;
	private String decreto;
	private String ordenanza;
	private BigDecimal valorLiquidacionBeneficio;
	
	private Jubilacion jubilacion;
	private Pension pension;
	private Beneficio beneficio;
	
	private int filaSeleccionada;

	
	

	
	
    /** Creates new form PnlDatosPrevisionalesView */
    public PnlDatosPrevisionalesView() {
        initComponents();
    }

    
	public void inicializarPanel(JDialog padre, AMPersonaFisicaModel modelo) {
		this.padre= padre;
		this.persona= modelo.getPersona();
		this.adminFactory= AdministracionFactory.getInstance();
		this.inicializarModelo();
		this.inicializarEventos();
		this.inicializarVista();

	}
    
  


	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCuadroDatosPrevisionales = new javax.swing.JPanel();
        cbxTipoBeneficio = new javax.swing.JComboBox();
        dtcFechaOtorgamiento = new com.toedter.calendar.JDateChooser();
        txtDecreto = new javax.swing.JTextField();
        txtOrdenanza = new javax.swing.JTextField();
        lblTipoBeneficio = new javax.swing.JLabel();
        lblFechaOtorgamiento = new javax.swing.JLabel();
        lblDecreto = new javax.swing.JLabel();
        lblOrdenanza = new javax.swing.JLabel();
        lblCausante = new javax.swing.JLabel();
        lblValorLiquidacion = new javax.swing.JLabel();
        txtValorLiquidacion = new javax.swing.JTextField();
        txtCausante = new javax.swing.JTextField();
        btnPersonaFallecida = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        xtsTitulo = new org.jdesktop.swingx.JXTitledSeparator();
        pnlCuadroDatosPrevisionales1 = new javax.swing.JPanel();
        lblTipoBeneficio1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBeneficio = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.gov.cjpmv.prestamos.gui.Principal.class).getContext().getResourceMap(PnlDatosPrevisionalesView.class);
        setBackground(resourceMap.getColor("ColorBlanco")); // NOI18N
        setName("Form"); // NOI18N

        pnlCuadroDatosPrevisionales.setBackground(resourceMap.getColor("pnlCuadroDatosPrevisionales.background")); // NOI18N
        pnlCuadroDatosPrevisionales.setName("pnlCuadroDatosPrevisionales"); // NOI18N

        cbxTipoBeneficio.setFont(resourceMap.getFont("ContenidoTextoCampo")); // NOI18N
        cbxTipoBeneficio.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        cbxTipoBeneficio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Jubilación Ordinaria Común", "Jubilación por Edad Avanzada", "Jubilación por Incapacidad", "Pensión" }));
        cbxTipoBeneficio.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("cbxTipoBeneficio.border.lineColor"), 1, true)); // NOI18N
        cbxTipoBeneficio.setName("cbxTipoBeneficio"); // NOI18N

        dtcFechaOtorgamiento.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        dtcFechaOtorgamiento.setFont(resourceMap.getFont("ContenidoTextoCampo")); // NOI18N
        dtcFechaOtorgamiento.setName("dtcFechaOtorgamiento"); // NOI18N

        txtDecreto.setFont(resourceMap.getFont("ContenidoTextoCampo")); // NOI18N
        txtDecreto.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        txtDecreto.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("txtDecreto.border.lineColor"), 1, true)); // NOI18N
        txtDecreto.setName("txtDecreto"); // NOI18N

        txtOrdenanza.setFont(resourceMap.getFont("ContenidoTextoCampo")); // NOI18N
        txtOrdenanza.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        txtOrdenanza.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("txtOrdenanza.border.lineColor"), 1, true)); // NOI18N
        txtOrdenanza.setName("txtOrdenanza"); // NOI18N

        lblTipoBeneficio.setFont(resourceMap.getFont("Campo")); // NOI18N
        lblTipoBeneficio.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        lblTipoBeneficio.setText(resourceMap.getString("lblTipoBeneficio.text")); // NOI18N
        lblTipoBeneficio.setName("lblTipoBeneficio"); // NOI18N

        lblFechaOtorgamiento.setFont(resourceMap.getFont("Campo")); // NOI18N
        lblFechaOtorgamiento.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        lblFechaOtorgamiento.setText(resourceMap.getString("lblFechaOtorgamiento.text")); // NOI18N
        lblFechaOtorgamiento.setName("lblFechaOtorgamiento"); // NOI18N

        lblDecreto.setFont(resourceMap.getFont("Campo")); // NOI18N
        lblDecreto.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        lblDecreto.setText(resourceMap.getString("lblDecreto.text")); // NOI18N
        lblDecreto.setName("lblDecreto"); // NOI18N

        lblOrdenanza.setFont(resourceMap.getFont("Campo")); // NOI18N
        lblOrdenanza.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        lblOrdenanza.setText(resourceMap.getString("lblOrdenanza.text")); // NOI18N
        lblOrdenanza.setName("lblOrdenanza"); // NOI18N

        lblCausante.setFont(resourceMap.getFont("lblCausante.font")); // NOI18N
        lblCausante.setForeground(resourceMap.getColor("lblCausante.foreground")); // NOI18N
        lblCausante.setText(resourceMap.getString("lblCausante.text")); // NOI18N
        lblCausante.setName("lblCausante"); // NOI18N

        lblValorLiquidacion.setFont(resourceMap.getFont("lblValorLiquidacion.font")); // NOI18N
        lblValorLiquidacion.setForeground(resourceMap.getColor("lblValorLiquidacion.foreground")); // NOI18N
        lblValorLiquidacion.setText(resourceMap.getString("lblValorLiquidacion.text")); // NOI18N
        lblValorLiquidacion.setName("lblValorLiquidacion"); // NOI18N

        txtValorLiquidacion.setFont(resourceMap.getFont("txtValorLiquidacion.font")); // NOI18N
        txtValorLiquidacion.setForeground(resourceMap.getColor("txtValorLiquidacion.foreground")); // NOI18N
        txtValorLiquidacion.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("txtValorLiquidacion.border.lineColor"), 1, true)); // NOI18N
        txtValorLiquidacion.setName("txtValorLiquidacion"); // NOI18N

        txtCausante.setFont(resourceMap.getFont("txtCausante.font")); // NOI18N
        txtCausante.setForeground(resourceMap.getColor("txtCausante.foreground")); // NOI18N
        txtCausante.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("txtCausante.border.lineColor"), 1, true)); // NOI18N
        txtCausante.setName("txtCausante"); // NOI18N

        btnPersonaFallecida.setIcon(resourceMap.getIcon("btnPersonaFallecida.icon")); // NOI18N
        btnPersonaFallecida.setName("btnPersonaFallecida"); // NOI18N

        btnGuardar.setIcon(resourceMap.getIcon("btnGuardar.icon")); // NOI18N
        btnGuardar.setText(resourceMap.getString("btnGuardar.text")); // NOI18N
        btnGuardar.setMaximumSize(new java.awt.Dimension(121, 23));
        btnGuardar.setName("btnGuardar"); // NOI18N
        btnGuardar.setPreferredSize(new java.awt.Dimension(101, 23));

        btnCancelar.setIcon(resourceMap.getIcon("btnCancelar.icon")); // NOI18N
        btnCancelar.setText(resourceMap.getString("btnCancelar.text")); // NOI18N
        btnCancelar.setName("btnCancelar"); // NOI18N

        javax.swing.GroupLayout pnlCuadroDatosPrevisionalesLayout = new javax.swing.GroupLayout(pnlCuadroDatosPrevisionales);
        pnlCuadroDatosPrevisionales.setLayout(pnlCuadroDatosPrevisionalesLayout);
        pnlCuadroDatosPrevisionalesLayout.setHorizontalGroup(
            pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTipoBeneficio)
                                    .addComponent(lblFechaOtorgamiento)
                                    .addComponent(lblDecreto)
                                    .addComponent(lblOrdenanza)
                                    .addComponent(lblValorLiquidacion))
                                .addGap(40, 40, 40)
                                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtValorLiquidacion)
                                    .addComponent(txtOrdenanza)
                                    .addComponent(txtDecreto)
                                    .addComponent(dtcFechaOtorgamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbxTipoBeneficio, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                                .addComponent(lblCausante, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtCausante, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPersonaFallecida, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        pnlCuadroDatosPrevisionalesLayout.setVerticalGroup(
            pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipoBeneficio)
                    .addComponent(cbxTipoBeneficio, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addComponent(lblFechaOtorgamiento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDecreto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblOrdenanza))
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addComponent(dtcFechaOtorgamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(txtDecreto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(txtOrdenanza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValorLiquidacion)
                    .addComponent(txtValorLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPersonaFallecida, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(lblCausante, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCuadroDatosPrevisionalesLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(txtCausante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlCuadroDatosPrevisionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        xtsTitulo.setForeground(resourceMap.getColor("ColorTextoCampo")); // NOI18N
        xtsTitulo.setFont(resourceMap.getFont("TituloBarrita")); // NOI18N
        xtsTitulo.setName("xtsTitulo"); // NOI18N
        xtsTitulo.setTitle(resourceMap.getString("xtsTitulo.title")); // NOI18N

        pnlCuadroDatosPrevisionales1.setBackground(resourceMap.getColor("pnlCuadroDatosPrevisionales1.background")); // NOI18N
        pnlCuadroDatosPrevisionales1.setName("pnlCuadroDatosPrevisionales1"); // NOI18N

        lblTipoBeneficio1.setFont(resourceMap.getFont("lblTipoBeneficio1.font")); // NOI18N
        lblTipoBeneficio1.setForeground(resourceMap.getColor("lblTipoBeneficio1.foreground")); // NOI18N
        lblTipoBeneficio1.setText(resourceMap.getString("lblTipoBeneficio1.text")); // NOI18N
        lblTipoBeneficio1.setName("lblTipoBeneficio1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblBeneficio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblBeneficio.setName("tblBeneficio"); // NOI18N
        jScrollPane1.setViewportView(tblBeneficio);

        btnAgregar.setIcon(resourceMap.getIcon("btnAgregar.icon")); // NOI18N
        btnAgregar.setName("btnAgregar"); // NOI18N

        btnModificar.setIcon(resourceMap.getIcon("btnModificar.icon")); // NOI18N
        btnModificar.setName("btnModificar"); // NOI18N
        btnModificar.setPreferredSize(new java.awt.Dimension(22, 22));

        btnEliminar.setIcon(resourceMap.getIcon("btnEliminar.icon")); // NOI18N
        btnEliminar.setName("btnEliminar"); // NOI18N

        javax.swing.GroupLayout pnlCuadroDatosPrevisionales1Layout = new javax.swing.GroupLayout(pnlCuadroDatosPrevisionales1);
        pnlCuadroDatosPrevisionales1.setLayout(pnlCuadroDatosPrevisionales1Layout);
        pnlCuadroDatosPrevisionales1Layout.setHorizontalGroup(
            pnlCuadroDatosPrevisionales1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCuadroDatosPrevisionales1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCuadroDatosPrevisionales1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addGroup(pnlCuadroDatosPrevisionales1Layout.createSequentialGroup()
                        .addComponent(lblTipoBeneficio1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        pnlCuadroDatosPrevisionales1Layout.setVerticalGroup(
            pnlCuadroDatosPrevisionales1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCuadroDatosPrevisionales1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCuadroDatosPrevisionales1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTipoBeneficio1)
                    .addGroup(pnlCuadroDatosPrevisionales1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModificar, 0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlCuadroDatosPrevisionales, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(xtsTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                    .addComponent(pnlCuadroDatosPrevisionales1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xtsTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlCuadroDatosPrevisionales1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlCuadroDatosPrevisionales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPersonaFallecida;
    private javax.swing.JComboBox cbxTipoBeneficio;
    private com.toedter.calendar.JDateChooser dtcFechaOtorgamiento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCausante;
    private javax.swing.JLabel lblDecreto;
    private javax.swing.JLabel lblFechaOtorgamiento;
    private javax.swing.JLabel lblOrdenanza;
    private javax.swing.JLabel lblTipoBeneficio;
    private javax.swing.JLabel lblTipoBeneficio1;
    private javax.swing.JLabel lblValorLiquidacion;
    private javax.swing.JPanel pnlCuadroDatosPrevisionales;
    private javax.swing.JPanel pnlCuadroDatosPrevisionales1;
    private javax.swing.JTable tblBeneficio;
    private javax.swing.JTextField txtCausante;
    private javax.swing.JTextField txtDecreto;
    private javax.swing.JTextField txtOrdenanza;
    private javax.swing.JTextField txtValorLiquidacion;
    private org.jdesktop.swingx.JXTitledSeparator xtsTitulo;
    // End of variables declaration//GEN-END:variables
	public javax.swing.JComboBox getCbxTipoBeneficio() {
		return cbxTipoBeneficio;
	}

	public com.toedter.calendar.JDateChooser getDtcFechaOtorgamiento() {
		return dtcFechaOtorgamiento;
	}

	public javax.swing.JTextField getTxtDecreto() {
		return txtDecreto;
	}

	public javax.swing.JTextField getTxtOrdenanza() {
		return txtOrdenanza;
	}

	
	  
    private void inicializarVista() {
    	this.disableBtnModificarEliminar();
		this.tblBeneficio.setModel(this.tblModeloBeneficio);
		this.habilitarPnlPrevisional(false);
		this.lblCausante.setVisible(false);
		this.txtCausante.setVisible(false);
		this.btnPersonaFallecida.setVisible(false);
	}
    
	
	


	private void habilitarPnlPrevisional(boolean valor) {
		this.btnGuardar.setEnabled(valor);
		this.btnCancelar.setEnabled(valor);
		this.btnPersonaFallecida.setEnabled(valor);
		this.cbxTipoBeneficio.setEnabled(valor);
		this.dtcFechaOtorgamiento.setEnabled(valor);
		this.txtCausante.setEditable(valor);
		this.txtDecreto.setEditable(valor);
		this.txtOrdenanza.setEditable(valor);
		this.txtValorLiquidacion.setEditable(valor);
		
	}


	private void limpiarCampos() {
		this.tipoBeneficio= null;
		this.causante=null;
		this.fechaOtorgamiento= null;
		this.decreto=null;
		this.ordenanza= null;
		this.valorLiquidacionBeneficio= null;
	}


	private void inicializarEventos() {
		this.tblBeneficio.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
			@Override
			public void valueChanged(ListSelectionEvent e) {
				if(isSelectedRow()){
					enableBtnModificarEliminar();
				}
			}			
		});
		
		
		this.btnAgregar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				agregarBeneficio();
			}

		});
		
		this.btnModificar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				modificarBeneficio();
			}

		});
		
		this.btnEliminar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				eliminarBeneficio();
			}

		});
		
		
		this.cbxTipoBeneficio.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(cbxTipoBeneficio.getSelectedItem()!=null){
					tipoBeneficio= (TipoBeneficio) cbxTipoBeneficio.getSelectedItem();
					actualizarVistaSegunBeneficio();
				}
				else{
					tipoBeneficio= TipoBeneficio.JUBILACION_COMUN;
					actualizarVistaSegunBeneficio();
				}
			}
		});
		
		this.btnGuardar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				guardarBeneficioTemporal();
			}
		});
		
		this.btnPersonaFallecida.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				buscarPersonaFallecida();
			}

		});
		
		this.btnCancelar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				limpiarCampos();
				actualizarVista();
				habilitarPnlPrevisional(false);
				disableBtnModificarEliminar();
			}
		});
		
		
	}

	private void enableBtnModificarEliminar() {
		this.btnModificar.setEnabled(true);
		this.btnEliminar.setEnabled(true);
	}
	
	private void disableBtnModificarEliminar() {
		this.btnModificar.setEnabled(false);
		this.btnEliminar.setEnabled(false);
	}
	
	
	private boolean isSelectedRow() {
		return this.tblBeneficio.getSelectedRow()!=-1;
	}
	
	
	private void agregarBeneficio() {
		this.beneficio= null;
		this.pension= null;
		this.jubilacion= null;
		this.filaSeleccionada=-1;
		this.habilitarPnlPrevisional(true);
		this.actualizarCbxBeneficion();
		this.limpiarCampos();
		this.actualizarVista();
	}
	
	private void actualizarCbxBeneficion(){
		DefaultComboBoxModel locComboBoxModel = new DefaultComboBoxModel();
		locComboBoxModel.addElement(null);
		for (TipoBeneficio cadaTipoBeneficio : TipoBeneficio.values()){
				locComboBoxModel.addElement(cadaTipoBeneficio);
		}
		this.cbxTipoBeneficio.setModel(locComboBoxModel);

	}
	
	
	private void actualizarCbxJubilacion(){
		DefaultComboBoxModel locComboBoxModel = new DefaultComboBoxModel();
		for (TipoBeneficio cadaTipoBeneficio : TipoBeneficio.values()){
			if(!cadaTipoBeneficio.equals(TipoBeneficio.PENSION)){
				locComboBoxModel.addElement(cadaTipoBeneficio);
			}
		}
		this.cbxTipoBeneficio.setModel(locComboBoxModel);
	}
	
	private void  actualizarCbxPension(){
		DefaultComboBoxModel locComboBoxModel = new DefaultComboBoxModel();
		for (TipoBeneficio cadaTipoBeneficio : TipoBeneficio.values()){
			if(cadaTipoBeneficio.equals(TipoBeneficio.PENSION)){
				locComboBoxModel.addElement(cadaTipoBeneficio);
			}
		}
		this.cbxTipoBeneficio.setModel(locComboBoxModel);
	}

	

	private void modificarBeneficio() {
		this.habilitarPnlPrevisional(true);
		int locSeleccionado= this.tblBeneficio.getSelectedRow();
		this.filaSeleccionada= locSeleccionado;
		this.beneficio= this.tblModeloBeneficio.getBeneficio(locSeleccionado);
		if (this.beneficio instanceof Jubilacion) {
			this.jubilacion = (Jubilacion) this.beneficio;
			this.tipoBeneficio= (jubilacion.getTipoBeneficio()!=null)?jubilacion.getTipoBeneficio():null;
			this.causante= null;
			this.fechaOtorgamiento= (jubilacion.getFechaOtorgamiento()!=null)?jubilacion.getFechaOtorgamiento():null;
			this.decreto= (jubilacion.getDecreto()!=null)?jubilacion.getDecreto():null;
			this.ordenanza= (jubilacion.getOrdenanza()!=null)?jubilacion.getOrdenanza():null;
			this.valorLiquidacionBeneficio= (jubilacion.getValor()!=null)?jubilacion.getValor():null;
			this.actualizarCbxJubilacion();
		}
		else{
			this.pension = (Pension) this.beneficio;
			this.tipoBeneficio= (pension.getTipoBeneficio()!=null)?pension.getTipoBeneficio():null;
			this.causante= (pension.getCausante()!=null)?pension.getCausante():null;
			this.fechaOtorgamiento= (pension.getFechaOtorgamiento()!=null)?pension.getFechaOtorgamiento():null;
			this.decreto= (pension.getDecreto()!=null)?pension.getDecreto():null;
			this.ordenanza= (pension.getOrdenanza()!=null)?pension.getOrdenanza():null;
			this.valorLiquidacionBeneficio= (pension.getValor()!=null)?pension.getValor():null;
			this.actualizarCbxPension();
		}
		this.actualizarVista();
	}
	

	private void actualizarVista() {
		this.cbxTipoBeneficio.setSelectedItem(this.tipoBeneficio);
		
		this.dtcFechaOtorgamiento.setDate(this.fechaOtorgamiento);
		
		if(this.causante!=null){
			this.txtCausante.setText(this.causante.getNombreYApellido());
		}
		else{
			this.txtCausante.setText("");
		}
		
		if(this.decreto!=null){
			this.txtDecreto.setText(this.decreto);
		}
		else{
			this.txtDecreto.setText("");
		}
		
		if(this.ordenanza!=null){
			this.txtOrdenanza.setText(this.ordenanza);
		}
		else{
			this.txtOrdenanza.setText("");
		}

		if(this.valorLiquidacionBeneficio!=null){
			this.txtValorLiquidacion.setText(this.valorLiquidacionBeneficio.toString());
		}
		else{
			this.txtValorLiquidacion.setText("");
		}

		this.actualizarVistaSegunBeneficio();
		
	}

	

	private void actualizarVistaSegunBeneficio() {
		if(this.tipoBeneficio.equals(TipoBeneficio.PENSION)){
			this.lblValorLiquidacion.setText("Valor del Beneficio (causante)");
			this.lblCausante.setVisible(true);
			this.txtCausante.setVisible(true);
			this.btnPersonaFallecida.setVisible(true);			
		}
		else{
			this.lblValorLiquidacion.setText("Valor de la liquidación");
			this.lblCausante.setVisible(false);
			this.txtCausante.setVisible(false);
			this.btnPersonaFallecida.setVisible(false);	
		}
	}
	


	private void inicializarModelo() {
		this.listaBeneficio= this.persona.getListaBeneficios();
		this.tblModeloBeneficio= new TblBeneficioModel(this.listaBeneficio);
		this.actualizarCbxBeneficion();
	}
	

	
	
	

	private void eliminarBeneficio() {
		int locSeleccionado= this.tblBeneficio.getSelectedRow();
		this.beneficio= this.tblModeloBeneficio.getBeneficio(locSeleccionado);
	
		String mensaje="¿Realmente desea el beneficio seleccionado "+this.beneficio.getTipoBeneficio().getDescripcion()+"?";
		String titulo= "Eliminar Beneficio";
		int confirmacion= JOptionPane.showConfirmDialog(this, mensaje, titulo, JOptionPane.YES_NO_OPTION);
		if(confirmacion==JOptionPane.YES_OPTION){
			
			boolean beneficioLiquidado= false;
			if(this.beneficio!=null){
				beneficioLiquidado= this.adminFactory.getAdministracionLiquidacionHaberes().isBeneficioLiquidado(this.beneficio);
			}
			
			if(beneficioLiquidado){
				JOptionPane.showMessageDialog(this, "Error. No se puede eliminar el beneficio ya que ha sido liquidado.", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else{
				this.listaBeneficio.remove(this.beneficio);
				this.tblModeloBeneficio= new TblBeneficioModel(this.listaBeneficio);
				this.inicializarVista();
			}
		}
	}
	
	
	
	
	

	private void buscarPersonaFallecida() {
		if (this.busquedaPersonaFisica==null){
			this.busquedaPersonaFisica = new BusquedaPersonaFisicaController(this.padre, EstadoPersonaFisica.FALLECIDO);
		}

		this.busquedaPersonaFisica.setVisible(true);
		
		this.causante=this.busquedaPersonaFisica.getPersonaSeleccionada();
	
		if (this.causante!=null){
			this.txtCausante.setText(this.causante.getNombreYApellido().toString());
		}
		else{
			this.txtCausante.setText("");
		}
		
	}
	

	private void guardarBeneficioTemporal() {
		try{
		
			this.actualizarModelo();
			if(this.beneficio==null){
				if(this.tipoBeneficio.equals(TipoBeneficio.PENSION)){
					this.pension= new Pension();					
				}
				else{
					this.jubilacion= new Jubilacion();
				}
			}
			if(this.filaSeleccionada!=-1){
				this.listaBeneficio.remove(this.filaSeleccionada);
			}
			
		
			if(this.pension!=null){
				this.pension.setCausante(this.causante);
				this.pension.setDecreto(this.decreto);
				this.pension.setFechaOtorgamiento(this.fechaOtorgamiento);
				this.pension.setOrdenanza(this.ordenanza);
				this.pension.setValor(this.valorLiquidacionBeneficio);
			
				this.listaBeneficio.add(this.pension);
			}
			else{
				this.jubilacion.setTipoBeneficio(this.tipoBeneficio);
				this.jubilacion.setDecreto(this.decreto);
				this.jubilacion.setFechaOtorgamiento(this.fechaOtorgamiento);
				this.jubilacion.setOrdenanza(this.ordenanza);
				this.jubilacion.setValor(this.valorLiquidacionBeneficio);
				this.listaBeneficio.add(this.jubilacion);
				
			}
			
			this.tblModeloBeneficio.setListaBeneficio(this.listaBeneficio);
			this.inicializarVista();
		
			this.limpiarCampos();
			this.actualizarVista();
			this.beneficio= null;
			this.pension= null;
			this.jubilacion= null;
			
		}
		catch(LogicaException e){
			JOptionPane.showMessageDialog(this, e.getMessage(), e.getTitulo(), JOptionPane.ERROR_MESSAGE);
		}
		
	}
	
	
	
	

	public void actualizarModelo() throws LogicaException {
		
		if(this.cbxTipoBeneficio.getSelectedItem()==null){
			int codigo= 139;
			String campo= "tipo de beneficio";
			throw new LogicaException(codigo, campo);
		}
		else{
			this.tipoBeneficio= (TipoBeneficio) this.cbxTipoBeneficio.getSelectedItem();
		}
		
		if(this.tipoBeneficio.equals(TipoBeneficio.PENSION) && (this.causante==null)){
			int codigo= 139;
			String campo= "causante";
			throw new LogicaException(codigo, campo);
		}
		
		if(this.tipoBeneficio.equals(TipoBeneficio.PENSION) && (this.txtValorLiquidacion==null)){
			int codigo= 139;
			String campo= "valor del beneficio (causante)";
			throw new LogicaException(codigo, campo);
		}

		String cadenaValor= Utiles.vacioSiNulo(this.txtValorLiquidacion.getText().trim());
		
		
		if(!cadenaValor.equals("")){
			try{
				
				BigDecimal valorReal = new BigDecimal(cadenaValor);
				BigDecimal valorComparador= new BigDecimal("0.00");
				if(valorReal.compareTo(valorComparador)<=0){
					int codigo= 140;
					String campo="valor";
					throw new LogicaException(codigo, campo);
				}
				else{
					this.valorLiquidacionBeneficio= new BigDecimal(cadenaValor);
					
				}
			}
			catch(Exception e){
				e.printStackTrace();
				
				int codigo= 140;
				String campo="valor de liquidación";
				throw new LogicaException(codigo, campo);
			}
		}
		else{
			int codigo= 140;
			String campo="valor";
			throw new LogicaException(codigo, campo);
		}
	
		this.fechaOtorgamiento= this.dtcFechaOtorgamiento.getDate();
		this.decreto= Utiles.nuloSiVacio(this.txtDecreto.getText());
		this.ordenanza= Utiles.nuloSiVacio(this.txtOrdenanza.getText());

		
		//Validacion permite agregar una sola jubilacion y una sola pension
		int contadorJubilacion=0;
		int contadorPension=0;
		
		for(Beneficio cadaBeneficio:this.listaBeneficio){
			if(cadaBeneficio.getTipoBeneficio().equals(TipoBeneficio.PENSION)){
				contadorPension+=1;	
			}
			else{
				contadorJubilacion+=1;
			}
		}
		
		if(this.beneficio==null || this.beneficio.getTipoBeneficio()!=this.tipoBeneficio){
			if(this.tipoBeneficio.equals(TipoBeneficio.PENSION) && contadorPension==1){
				int codigo=143;
				throw new LogicaException(codigo);
			}
		
			if(!this.tipoBeneficio.equals(TipoBeneficio.PENSION) && contadorJubilacion==1){
				if(this.beneficio==null || this.beneficio.getTipoBeneficio().equals(TipoBeneficio.PENSION)){
						int codigo=143;
						throw new LogicaException(codigo);
				}
			}
		}

	}
	
	
	public List<Beneficio> getListaBeneficio() {
		return this.listaBeneficio;
	}

	

    
}
