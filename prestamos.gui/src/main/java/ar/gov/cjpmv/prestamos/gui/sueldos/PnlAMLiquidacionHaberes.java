/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PnlAMLiquidacionHaberes.java
 *
 * Created on 24/12/2011, 16:10:57
 */
package ar.gov.cjpmv.prestamos.gui.sueldos;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import com.toedter.calendar.JCalendar;



import ar.gov.cjpmv.prestamos.core.business.exceptions.LogicaException;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.ConceptoHaberes;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.LineaRecibo;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.LiquidacionHaberes;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.ReciboSueldo;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.TipoLiquidacion;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.enums.TipoCodigo;
import ar.gov.cjpmv.prestamos.gui.AdministracionFactory;
import ar.gov.cjpmv.prestamos.gui.creditos.exportacion.TblDetalleLiquidacionModel;
import ar.gov.cjpmv.prestamos.gui.creditos.reportes.ReporteSaldo;
import ar.gov.cjpmv.prestamos.gui.reportes.GestorImpresion;
import ar.gov.cjpmv.prestamos.gui.reportes.enums.Reportes;
import ar.gov.cjpmv.prestamos.gui.sueldos.model.TblDetalleLiquidacionHaberesModel;
import ar.gov.cjpmv.prestamos.gui.utiles.JTableOrdenable;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 *
 * @author daiana
 */
public class PnlAMLiquidacionHaberes extends javax.swing.JPanel {

	private LiquidacionHaberes liquidacionHaberes;
	private AdminSueldosView adminSueldo;
	private DefaultComboBoxModel modeloTipoLiquidacion;
	private AdministracionFactory adminFactory;
	private TblDetalleLiquidacionHaberesModel modeloReciboHaberes;
	private List<ReciboSueldo> listaReciboSueldo;
	private PnlAMDetalleLiquidacionHaberes pnlReciboHaberes;
	
	private BigDecimal totalHaberes;
	private BigDecimal totalDescuentos;
	private BigDecimal totalNeto;
	
	private Integer anio;
	private Integer mes;
	private TipoLiquidacion tipoLiquidacion;
	private Date fechaPago;
	

	private static DateFormat formateadorMes= new SimpleDateFormat("MMMMM");
	private static DateFormat formateadorAnio= new SimpleDateFormat("yy");
	
    public PnlAMLiquidacionHaberes(AdminSueldosView adminSueldosView) {
        initComponents();
        this.adminSueldo= adminSueldosView;
        this.liquidacionHaberes= new LiquidacionHaberes();
       	this.adminFactory= AdministracionFactory.getInstance();
        this.inicializarEventos();
        this.inicializarModelo();
        this.inicializarVista();
        this.cbxTipoLiquidacion.setRenderer(new TipoLiquidacionCellRenderer());
	}


	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTituloPnlDcha = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pnlParametrosBusqueda1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLiquidacionesHaberes = new JTableOrdenable();
        pnlBotonera = new javax.swing.JPanel();
        lblAgregar = new javax.swing.JLabel();
        lblEditar = new javax.swing.JLabel();
        lblEliminar = new javax.swing.JLabel();
        lblEjerciciosContables1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblEjerciciosContables = new javax.swing.JLabel();
        lblEjerciciosContables2 = new javax.swing.JLabel();
        lblEjerciciosContables3 = new javax.swing.JLabel();
        txtTotalHaberes = new javax.swing.JTextField();
        txtTotalDescuentos = new javax.swing.JTextField();
        txtTotalNeto = new javax.swing.JTextField();
        pnlParametrosBusqueda = new javax.swing.JPanel();
        btnGenerarLiquidacion = new javax.swing.JButton();
        xtsTitulo = new org.jdesktop.swingx.JXTitledSeparator();
        lblTipoLiquidacion = new javax.swing.JLabel();
        cbxTipoLiquidacion = new javax.swing.JComboBox();
        mchMes = new com.toedter.calendar.JMonthChooser();
        lblMes1 = new javax.swing.JLabel();
        lblMes2 = new javax.swing.JLabel();
        ycAnio = new com.toedter.calendar.JYearChooser();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        btnImprimirTodos = new javax.swing.JButton();
        btnImprimirSeleccionados = new javax.swing.JButton();
        lblTipoLiquidacion1 = new javax.swing.JLabel();
        dtcFechaPago = new com.toedter.calendar.JDateChooser();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.gov.cjpmv.prestamos.gui.Principal.class).getContext().getResourceMap(PnlAMLiquidacionHaberes.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N

        lblTituloPnlDcha.setFont(resourceMap.getFont("lblTituloPnlDcha.font")); // NOI18N
        lblTituloPnlDcha.setForeground(resourceMap.getColor("lblTituloPnlDcha.foreground")); // NOI18N
        lblTituloPnlDcha.setIcon(resourceMap.getIcon("lblTituloPnlDcha.icon")); // NOI18N
        lblTituloPnlDcha.setText(resourceMap.getString("lblTituloPnlDcha.text")); // NOI18N
        lblTituloPnlDcha.setName("lblTituloPnlDcha"); // NOI18N

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        pnlParametrosBusqueda1.setName("pnlParametrosBusqueda1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblLiquidacionesHaberes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblLiquidacionesHaberes.setName("tblLiquidacionesHaberes"); // NOI18N
        jScrollPane1.setViewportView(tblLiquidacionesHaberes);

        pnlBotonera.setName("pnlBotonera"); // NOI18N
        pnlBotonera.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblAgregar.setFont(resourceMap.getFont("lblAgregar.font")); // NOI18N
        lblAgregar.setForeground(resourceMap.getColor("lblAgregar.foreground")); // NOI18N
        lblAgregar.setIcon(resourceMap.getIcon("lblAgregar.icon")); // NOI18N
        lblAgregar.setText(resourceMap.getString("lblAgregar.text")); // NOI18N
        lblAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAgregar.setName("lblAgregar"); // NOI18N
        pnlBotonera.add(lblAgregar);

        lblEditar.setFont(resourceMap.getFont("lblEditar.font")); // NOI18N
        lblEditar.setForeground(resourceMap.getColor("lblEditar.foreground")); // NOI18N
        lblEditar.setIcon(resourceMap.getIcon("lblEditar.icon")); // NOI18N
        lblEditar.setText(resourceMap.getString("lblEditar.text")); // NOI18N
        lblEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblEditar.setName("lblEditar"); // NOI18N
        pnlBotonera.add(lblEditar);

        lblEliminar.setFont(resourceMap.getFont("lblEliminar.font")); // NOI18N
        lblEliminar.setForeground(resourceMap.getColor("lblEliminar.foreground")); // NOI18N
        lblEliminar.setIcon(resourceMap.getIcon("lblEliminar.icon")); // NOI18N
        lblEliminar.setText(resourceMap.getString("lblEliminar.text")); // NOI18N
        lblEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblEliminar.setName("lblEliminar"); // NOI18N
        pnlBotonera.add(lblEliminar);

        lblEjerciciosContables1.setFont(resourceMap.getFont("lblEjerciciosContables1.font")); // NOI18N
        lblEjerciciosContables1.setForeground(resourceMap.getColor("lblEjerciciosContables1.foreground")); // NOI18N
        lblEjerciciosContables1.setText(resourceMap.getString("lblEjerciciosContables1.text")); // NOI18N
        lblEjerciciosContables1.setName("lblEjerciciosContables1"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(resourceMap.getColor("jPanel2.border.border.lineColor"), 1, true), resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setForeground(resourceMap.getColor("jPanel2.foreground")); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        lblEjerciciosContables.setFont(resourceMap.getFont("lblEjerciciosContables.font")); // NOI18N
        lblEjerciciosContables.setForeground(resourceMap.getColor("lblEjerciciosContables.foreground")); // NOI18N
        lblEjerciciosContables.setText(resourceMap.getString("lblEjerciciosContables.text")); // NOI18N
        lblEjerciciosContables.setName("lblEjerciciosContables"); // NOI18N

        lblEjerciciosContables2.setFont(resourceMap.getFont("lblEjerciciosContables2.font")); // NOI18N
        lblEjerciciosContables2.setForeground(resourceMap.getColor("lblEjerciciosContables2.foreground")); // NOI18N
        lblEjerciciosContables2.setText(resourceMap.getString("lblEjerciciosContables2.text")); // NOI18N
        lblEjerciciosContables2.setName("lblEjerciciosContables2"); // NOI18N

        lblEjerciciosContables3.setFont(resourceMap.getFont("lblEjerciciosContables3.font")); // NOI18N
        lblEjerciciosContables3.setForeground(resourceMap.getColor("lblEjerciciosContables3.foreground")); // NOI18N
        lblEjerciciosContables3.setText(resourceMap.getString("lblEjerciciosContables3.text")); // NOI18N
        lblEjerciciosContables3.setName("lblEjerciciosContables3"); // NOI18N

        txtTotalHaberes.setFont(resourceMap.getFont("txtTotalHaberes.font")); // NOI18N
        txtTotalHaberes.setForeground(resourceMap.getColor("txtTotalHaberes.foreground")); // NOI18N
        txtTotalHaberes.setText(resourceMap.getString("txtTotalHaberes.text")); // NOI18N
        txtTotalHaberes.setName("txtTotalHaberes"); // NOI18N

        txtTotalDescuentos.setText(resourceMap.getString("txtTotalDescuentos.text")); // NOI18N
        txtTotalDescuentos.setName("txtTotalDescuentos"); // NOI18N

        txtTotalNeto.setText(resourceMap.getString("txtTotalNeto.text")); // NOI18N
        txtTotalNeto.setName("txtTotalNeto"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEjerciciosContables3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblEjerciciosContables, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEjerciciosContables2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtTotalNeto)
                    .addComponent(txtTotalDescuentos)
                    .addComponent(txtTotalHaberes, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEjerciciosContables)
                    .addComponent(txtTotalHaberes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEjerciciosContables2)
                    .addComponent(txtTotalDescuentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEjerciciosContables3)
                    .addComponent(txtTotalNeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlParametrosBusqueda1Layout = new javax.swing.GroupLayout(pnlParametrosBusqueda1);
        pnlParametrosBusqueda1.setLayout(pnlParametrosBusqueda1Layout);
        pnlParametrosBusqueda1Layout.setHorizontalGroup(
            pnlParametrosBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametrosBusqueda1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlParametrosBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE)
                    .addGroup(pnlParametrosBusqueda1Layout.createSequentialGroup()
                        .addComponent(lblEjerciciosContables1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 382, Short.MAX_VALUE)
                        .addComponent(pnlBotonera, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlParametrosBusqueda1Layout.setVerticalGroup(
            pnlParametrosBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametrosBusqueda1Layout.createSequentialGroup()
                .addGroup(pnlParametrosBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlParametrosBusqueda1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblEjerciciosContables1))
                    .addComponent(pnlBotonera, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlParametrosBusqueda.setName("pnlParametrosBusqueda"); // NOI18N

        btnGenerarLiquidacion.setFont(resourceMap.getFont("btnGenerarLiquidacion.font")); // NOI18N
        btnGenerarLiquidacion.setForeground(resourceMap.getColor("btnGenerarLiquidacion.foreground")); // NOI18N
        btnGenerarLiquidacion.setIcon(resourceMap.getIcon("btnGenerarLiquidacion.icon")); // NOI18N
        btnGenerarLiquidacion.setText(resourceMap.getString("btnGenerarLiquidacion.text")); // NOI18N
        btnGenerarLiquidacion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerarLiquidacion.setName("btnGenerarLiquidacion"); // NOI18N

        xtsTitulo.setForeground(resourceMap.getColor("xtsTitulo.foreground")); // NOI18N
        xtsTitulo.setFont(resourceMap.getFont("xtsTitulo.font")); // NOI18N
        xtsTitulo.setName("xtsTitulo"); // NOI18N
        xtsTitulo.setTitle(resourceMap.getString("xtsTitulo.title")); // NOI18N

        lblTipoLiquidacion.setFont(resourceMap.getFont("lblTipoLiquidacion.font")); // NOI18N
        lblTipoLiquidacion.setForeground(resourceMap.getColor("lblTipoLiquidacion.foreground")); // NOI18N
        lblTipoLiquidacion.setText(resourceMap.getString("lblTipoLiquidacion.text")); // NOI18N
        lblTipoLiquidacion.setName("lblTipoLiquidacion"); // NOI18N

        cbxTipoLiquidacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Activos - Normal", "Activos - SAC", "Jubilados - Normal", "Jubilados - SAC", "Pensionados - Normal", "Pensionados - SAC" }));
        cbxTipoLiquidacion.setName("cbxTipoLiquidacion"); // NOI18N

        mchMes.setName("mchMes"); // NOI18N
        mchMes.setYearChooser(null);

        lblMes1.setFont(resourceMap.getFont("lblMes1.font")); // NOI18N
        lblMes1.setForeground(resourceMap.getColor("lblMes1.foreground")); // NOI18N
        lblMes1.setText(resourceMap.getString("lblMes1.text")); // NOI18N
        lblMes1.setName("lblMes1"); // NOI18N

        lblMes2.setFont(resourceMap.getFont("lblMes2.font")); // NOI18N
        lblMes2.setForeground(resourceMap.getColor("lblMes2.foreground")); // NOI18N
        lblMes2.setText(resourceMap.getString("lblMes2.text")); // NOI18N
        lblMes2.setName("lblMes2"); // NOI18N

        ycAnio.setName("ycAnio"); // NOI18N

        javax.swing.GroupLayout pnlParametrosBusquedaLayout = new javax.swing.GroupLayout(pnlParametrosBusqueda);
        pnlParametrosBusqueda.setLayout(pnlParametrosBusquedaLayout);
        pnlParametrosBusquedaLayout.setHorizontalGroup(
            pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xtsTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE)
                    .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                                .addComponent(lblMes2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mchMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTipoLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxTipoLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                                .addComponent(lblMes1)
                                .addGap(21, 21, 21)
                                .addComponent(ycAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addComponent(btnGenerarLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlParametrosBusquedaLayout.setVerticalGroup(
            pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xtsTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                        .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTipoLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxTipoLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMes1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(mchMes, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(lblMes2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlParametrosBusquedaLayout.createSequentialGroup()
                                .addComponent(ycAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))))
                    .addComponent(btnGenerarLiquidacion, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlParametrosBusqueda1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlParametrosBusqueda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlParametrosBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlParametrosBusqueda1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnCancelar.setIcon(resourceMap.getIcon("btnCancelar.icon")); // NOI18N
        btnCancelar.setText(resourceMap.getString("btnCancelar.text")); // NOI18N
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.setName("btnCancelar"); // NOI18N

        btnAceptar.setIcon(resourceMap.getIcon("btnAceptar.icon")); // NOI18N
        btnAceptar.setText(resourceMap.getString("btnAceptar.text")); // NOI18N
        btnAceptar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAceptar.setName("btnAceptar"); // NOI18N

        btnImprimirTodos.setIcon(resourceMap.getIcon("btnImprimirTodos.icon")); // NOI18N
        btnImprimirTodos.setText(resourceMap.getString("btnImprimirTodos.text")); // NOI18N
        btnImprimirTodos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImprimirTodos.setName("btnImprimirTodos"); // NOI18N

        btnImprimirSeleccionados.setIcon(resourceMap.getIcon("btnImprimirSeleccionados.icon")); // NOI18N
        btnImprimirSeleccionados.setText(resourceMap.getString("btnImprimirSeleccionados.text")); // NOI18N
        btnImprimirSeleccionados.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImprimirSeleccionados.setName("btnImprimirSeleccionados"); // NOI18N

        lblTipoLiquidacion1.setFont(resourceMap.getFont("lblTipoLiquidacion1.font")); // NOI18N
        lblTipoLiquidacion1.setForeground(resourceMap.getColor("lblTipoLiquidacion1.foreground")); // NOI18N
        lblTipoLiquidacion1.setText(resourceMap.getString("lblTipoLiquidacion1.text")); // NOI18N
        lblTipoLiquidacion1.setName("lblTipoLiquidacion1"); // NOI18N

        dtcFechaPago.setForeground(resourceMap.getColor("dtcFechaPago.foreground")); // NOI18N
        dtcFechaPago.setFont(resourceMap.getFont("dtcFechaPago.font")); // NOI18N
        dtcFechaPago.setName("dtcFechaPago"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTituloPnlDcha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnImprimirSeleccionados, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImprimirTodos))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTipoLiquidacion1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dtcFechaPago, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addGap(486, 486, 486)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTituloPnlDcha)
                .addGap(11, 11, 11)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblTipoLiquidacion1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dtcFechaPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnImprimirSeleccionados)
                            .addComponent(btnImprimirTodos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGenerarLiquidacion;
    private javax.swing.JButton btnImprimirSeleccionados;
    private javax.swing.JButton btnImprimirTodos;
    private javax.swing.JComboBox cbxTipoLiquidacion;
    private com.toedter.calendar.JDateChooser dtcFechaPago;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAgregar;
    private javax.swing.JLabel lblEditar;
    private javax.swing.JLabel lblEjerciciosContables;
    private javax.swing.JLabel lblEjerciciosContables1;
    private javax.swing.JLabel lblEjerciciosContables2;
    private javax.swing.JLabel lblEjerciciosContables3;
    private javax.swing.JLabel lblEliminar;
    private javax.swing.JLabel lblMes1;
    private javax.swing.JLabel lblMes2;
    private javax.swing.JLabel lblTipoLiquidacion;
    private javax.swing.JLabel lblTipoLiquidacion1;
    private javax.swing.JLabel lblTituloPnlDcha;
    private com.toedter.calendar.JMonthChooser mchMes;
    private javax.swing.JPanel pnlBotonera;
    private javax.swing.JPanel pnlParametrosBusqueda;
    private javax.swing.JPanel pnlParametrosBusqueda1;
    private JTableOrdenable tblLiquidacionesHaberes;
    private javax.swing.JTextField txtTotalDescuentos;
    private javax.swing.JTextField txtTotalHaberes;
    private javax.swing.JTextField txtTotalNeto;
    private org.jdesktop.swingx.JXTitledSeparator xtsTitulo;
    private com.toedter.calendar.JYearChooser ycAnio;
    // End of variables declaration//GEN-END:variables
    
    
    
	public void setLiquidacionHaberes(LiquidacionHaberes liquidacionHaberes) {
		this.liquidacionHaberes= liquidacionHaberes;
		this.inicializarModelo();
		this.inicializarVista();
		
	}
	

	private void inicializarVista() {
		this.btnAceptar.setText("Guardar");
		this.btnAceptar.setVisible(true);
		this.btnCancelar.setVisible(true);
		this.lblEditar.setVisible(true);
		this.lblEliminar.setVisible(true);
		this.lblTipoLiquidacion1.setVisible(false);
		this.dtcFechaPago.setVisible(false);
		this.btnImprimirSeleccionados.setVisible(false);
		this.btnImprimirTodos.setVisible(false);
		
		this.actualizarVistaTotalesGenerales();
		
		this.txtTotalHaberes.setEnabled(false);
		this.txtTotalDescuentos.setEnabled(false);
		this.txtTotalNeto.setEnabled(false);
		
		
		this.lblAgregar.setVisible(false);
		this.cbxTipoLiquidacion.setModel(this.modeloTipoLiquidacion);
		if(this.tipoLiquidacion!=null){
			this.cbxTipoLiquidacion.setSelectedItem(this.tipoLiquidacion);
		}
		else{
			this.cbxTipoLiquidacion.setSelectedIndex(0);
		}
		this.tblLiquidacionesHaberes.setModel(this.modeloReciboHaberes);
		if(this.liquidacionHaberes.getId()!=null){
			this.mchMes.setMonth(this.mes-1);
			this.ycAnio.setYear(this.anio);
			this.btnGenerarLiquidacion.setVisible(false);
			this.cbxTipoLiquidacion.setEnabled(false);
			this.mchMes.setEnabled(false);
			this.ycAnio.setEnabled(false);
		}
		else{
			this.btnGenerarLiquidacion.setVisible(true);
			this.cbxTipoLiquidacion.setEnabled(true);
			this.mchMes.setEnabled(true);
			this.ycAnio.setEnabled(true);
		}
		this.lblEditar.setEnabled(false);
		this.lblEliminar.setEnabled(false);
		this.tblLiquidacionesHaberes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	}

	private void inicializarModelo() {
		this.totalHaberes= new BigDecimal("0.00").setScale(2, RoundingMode.HALF_UP);
		this.totalDescuentos= new BigDecimal("0.00").setScale(2, RoundingMode.HALF_UP);
		this.totalNeto= new BigDecimal("0.00").setScale(2, RoundingMode.HALF_UP);
		this.listaReciboSueldo=new ArrayList<ReciboSueldo>();
		this.modeloTipoLiquidacion= new DefaultComboBoxModel(TipoLiquidacion.values());
	
		if(this.liquidacionHaberes.getId()!=null){
			this.tipoLiquidacion= this.liquidacionHaberes.getTipo();
			this.listaReciboSueldo = this.adminFactory
						.getAdministracionLiquidacionHaberes()
						.getRecibos(this.liquidacionHaberes); 
			this.mes= this.liquidacionHaberes.getMes();
			this.anio= this.liquidacionHaberes.getAnio();
		}
		else{
			this.tipoLiquidacion= null;
			this.listaReciboSueldo.clear();
		}
		this.modeloReciboHaberes= new TblDetalleLiquidacionHaberesModel(this.listaReciboSueldo);
		this.modeloReciboHaberes.calcularTotalesRecibo();
		this.totalHaberes= this.modeloReciboHaberes.getTotalHaberes();
		this.totalDescuentos= this.modeloReciboHaberes.getTotalDescuento();
		this.totalNeto= this.modeloReciboHaberes.getTotalNeto();
	}

	private void inicializarEventos() {
		this.btnGenerarLiquidacion.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				generarLiquidacion();
			}
		});
		
		
		this.lblEditar.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (lblEditar.isEnabled()) {
					editar(); 
				}
			}
		});
		
		this.lblEliminar.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (lblEliminar.isEnabled()) {
					eliminar();
				}
			}			
		});
		
		this.tblLiquidacionesHaberes.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0){
				if(isSelectedRowConcepto()){
			    	lblEditar.setEnabled(true);
			    	lblEliminar.setEnabled(true);
				}
			}
		});
		
		

		this.btnAceptar.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				guardar();
				
			}

		});
		
		this.btnCancelar.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				cancelar();
				
			}
			
		});
		
		
		this.btnImprimirSeleccionados.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				imprimirRecibosSeleccionados();
			}
		});
		
		this.btnImprimirTodos.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				imprimirRecibosTodos();
			}
		});
		
	}
	
	
	private void imprimirRecibosSeleccionados(){
		try{
			this.fechaPago= this.dtcFechaPago.getDate();
			if(this.fechaPago==null){
				int codigo= 36;
				String campo= "Error. Debe ingresar la fecha de pago para imprimir los recibos de haberes.";
				throw new LogicaException(codigo, campo);
			}
			else{
				int[] lineasSeleccionadas = this.tblLiquidacionesHaberes.getSelectedRows();
				List<ReciboSueldo> listaSeleccionada= this.modeloReciboHaberes.getListaSeleccionada(lineasSeleccionadas);
				if(listaSeleccionada.isEmpty()){
					int codigo= 36;
					String campo= "Debe seleccionar primero los recibos que desea imprimir.";
					throw new LogicaException(codigo, campo);
				}
				else{
					this.imprimir(listaSeleccionada);
				}
			}
		}
		catch(LogicaException e){
			JOptionPane.showMessageDialog(this, e.getMessage(), "Error" , JOptionPane.ERROR_MESSAGE);
		}
	}
	
	
	
	private void imprimirRecibosTodos(){
		this.fechaPago= this.dtcFechaPago.getDate();
		if(this.fechaPago==null){
			String campo= "Error. Debe ingresar la fecha de pago para imprimir los recibos de haberes.";
			JOptionPane.showMessageDialog(this, campo, "Error" , JOptionPane.ERROR_MESSAGE);
		}
		else{ 
			listaReciboSueldo = modeloReciboHaberes.getListaRecibosSueldo();
			this.imprimir(this.listaReciboSueldo);
		}
	}
	
	private void imprimir(List<ReciboSueldo> lista){
		try{
			FormateadorImpresionRecibo locFormateador= new FormateadorImpresionRecibo(lista);
			List<ImpresionReciboHaberes> listaReciboFormateada = new ArrayList<ImpresionReciboHaberes>(locFormateador.getListaImpresionRecibo());
			
			lista.get(0).getLiquidacion().getMes();
			Calendar cal=  Calendar.getInstance();
			cal.set(lista.get(0).getLiquidacion().getAnio(), lista.get(0).getLiquidacion().getMes()-1, 1);
			String mesAnioLiquidacion= this.formateadorMes.format(cal.getTime())+"/"+this.formateadorAnio.format(cal.getTime());
			
			GestorImpresion.imprimirCollectionDataSource(this.adminSueldo, Reportes.REPORTE_RECIBO_HABERES, locFormateador.setearParametros(this.fechaPago, mesAnioLiquidacion.toUpperCase()), listaReciboFormateada);
		}
		catch(Exception e){
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "No se ha podido generar el listado.", "Error",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	
	

	private void guardar() {
		try{
			this.validarListaRecibos();
			this.liquidacionHaberes.setRecibos(this.listaReciboSueldo);
			this.adminFactory.getAdministracionLiquidacionHaberes().guardar(this.liquidacionHaberes);
			JOptionPane.showMessageDialog(this, "Los datos se guardaron correctamente.","Guardar Liquidación", JOptionPane.INFORMATION_MESSAGE);
			this.habilitarSoloImpresionRecibos();
			
		}
		catch(LogicaException e){
			JOptionPane.showMessageDialog(this, e.getMessage(), e.getTitulo(), JOptionPane.ERROR_MESSAGE);
		}
	}
	

	

	public void habilitarSoloImpresionRecibos() {
		//ver como se puede quitar la seleccionde una fila en la tabla
		this.modeloReciboHaberes= new TblDetalleLiquidacionHaberesModel(this.listaReciboSueldo);
		this.tblLiquidacionesHaberes.setModel(this.modeloReciboHaberes);
		this.tblLiquidacionesHaberes.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		
		this.lblTipoLiquidacion1.setVisible(true);
		this.dtcFechaPago.setVisible(true);
		Date fechaHoy= Calendar.getInstance().getTime();
		this.dtcFechaPago.setDate(fechaHoy);
		
		this.btnAceptar.setVisible(false);
		this.btnCancelar.setVisible(false);
		this.lblAgregar.setVisible(false);
		this.lblEditar.setVisible(false);
		this.lblEliminar.setVisible(false);
		this.pnlParametrosBusqueda.setEnabled(false);
		this.cbxTipoLiquidacion.setEnabled(false);
		this.mchMes.setEnabled(false);
		this.ycAnio.setEnabled(false);
		this.btnGenerarLiquidacion.setVisible(false);
		this.btnImprimirSeleccionados.setVisible(true);
		this.btnImprimirTodos.setVisible(true);
	}


	private void cancelar() {
		String locMensaje = "¿Está seguro que desea cancelar la operación?";
		int valor = JOptionPane.showConfirmDialog(this,locMensaje,"Cancelar", JOptionPane.YES_NO_OPTION);
		if (valor == JOptionPane.YES_OPTION) {
			this.adminSueldo.mostrarAdminLiquidacionHaberes();
		}		
		
	}
	
	private boolean isSelectedRowConcepto(){
		return this.tblLiquidacionesHaberes.getSelectedRow() != -1;
	}
	
	private void generarLiquidacion() {
		try{
			boolean generar = true;
			if(this.listaReciboSueldo!=null && !this.listaReciboSueldo.isEmpty()) {
				String locMensaje="Al generar nuevamente la liquidación perderá todos los cambios realizados. ¿Realmente desea continuar?";
				String locTitulo="Confirmación";
				int confirmacion=JOptionPane.showConfirmDialog(this,locMensaje, locTitulo, JOptionPane.YES_OPTION);
				generar = confirmacion==JOptionPane.YES_OPTION;
			}

			if (generar) {
				generarLiquidacionSegundoPlano();
			}
		}
		catch(LogicaException e){
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, e.getMessage(), e.getTitulo(), JOptionPane.ERROR_MESSAGE);
		}
		catch(RuntimeException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private void generarLiquidacionSegundoPlano() throws LogicaException {
		final CargandoLiquidacionesDialog dialogo = new CargandoLiquidacionesDialog();
		this.actualizarModelo();
		SwingWorker<Void,Void> liquidacionWorker = new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() throws Exception {
				liquidacionHaberes = adminFactory.getAdministracionLiquidacionHaberes()
						.generarLiquidacion(mes, anio, tipoLiquidacion);
				listaReciboSueldo = liquidacionHaberes.getRecibos();
				return null;
			}
			
			protected void done() {
				try {
					get();
					if(listaReciboSueldo==null || listaReciboSueldo.isEmpty()){
						int codigo= 36;
						String campo= "Error al generar la liquidación. No se encontraron personas para liquidar.";
						throw new LogicaException(codigo, campo);
					}
					else{
						modeloReciboHaberes.setRecibos(listaReciboSueldo);
						totalDescuentos = modeloReciboHaberes.getTotalDescuento();
						totalHaberes = modeloReciboHaberes.getTotalHaberes();
						totalNeto = modeloReciboHaberes.getTotalNeto();
						txtTotalHaberes.setText(totalHaberes.toString());
						txtTotalDescuentos.setText(totalDescuentos.toString());
						txtTotalNeto.setText(totalNeto.toString());
						lblEditar.setEnabled(false);
						lblEliminar.setEnabled(false);
					}
					
				}
				catch(ExecutionException e) {
					e.printStackTrace();
					if (e.getCause() instanceof LogicaException) {
						LogicaException ex = (LogicaException)e.getCause();
						JOptionPane.showMessageDialog(
								PnlAMLiquidacionHaberes.this, 
								ex.getMessage(), 
								ex.getTitulo(), 
								JOptionPane.ERROR_MESSAGE);
					}
					else {
						JOptionPane.showMessageDialog(PnlAMLiquidacionHaberes.this, 
								"Ha ocurrido un error al generar la liquidación", "Error", JOptionPane.ERROR_MESSAGE);
					}
				}
				catch(RuntimeException e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(PnlAMLiquidacionHaberes.this, 
							e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
				} 
				catch (Exception e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(PnlAMLiquidacionHaberes.this, 
							"Ha ocurrido un error al generar la liquidación", "Error", JOptionPane.ERROR_MESSAGE);
				}
				finally {
					dialogo.dispose();
				}
			};
		};
		liquidacionWorker.execute();
		dialogo.setVisible(true);
	}


	private void actualizarModelo() throws LogicaException{
		
		Integer locMes=this.mchMes.getMonth()+1;
		this.mes= locMes;
		Integer locAnio= this.ycAnio.getYear();
		if(locAnio==null){
			int codigo= 139;
			String campo="año";
			throw new LogicaException(codigo, campo);
		}
		this.anio= locAnio;
		this.tipoLiquidacion= (TipoLiquidacion) this.cbxTipoLiquidacion.getSelectedItem();
		if(this.tipoLiquidacion==null){
			int codigo= 139;
			String campo="tipo de liquidación";
			throw new LogicaException(codigo, campo);
		}
		
	}
	
	private void validarListaRecibos() throws LogicaException{
		if(this.listaReciboSueldo==null || this.listaReciboSueldo.isEmpty()){
			int codigo= 36;
			String campo="Error al guardar la liquidación. Debe incluirse al menos un recibo de sueldo en la liquidación.\n" +
							"Agregue una persona con las características según el tipo de liquidación que desea realizar. ";
			throw new LogicaException(codigo, campo);
		}
	}

	private void editar() {
		int seleccionado= this.tblLiquidacionesHaberes.getSelectedRow();
		ReciboSueldo locRecibo= this.modeloReciboHaberes.getReciboSueldo(seleccionado);
		JDialog ventana= new JDialog(this.adminSueldo, true);
		ventana.setTitle("Editar Recibo de Haberes");
		this.pnlReciboHaberes= new PnlAMDetalleLiquidacionHaberes(this, ventana, locRecibo);
		ventana.setLocationRelativeTo(this);
		ventana.setVisible(true);
		modeloReciboHaberes.fireTableRowsUpdated(seleccionado, seleccionado);
		this.lblEditar.setEnabled(false);
		this.lblEliminar.setEnabled(false);
	
		
		this.modeloReciboHaberes.calcularTotalesRecibo();
		this.totalHaberes= this.modeloReciboHaberes.getTotalHaberes();
		this.totalDescuentos= this.modeloReciboHaberes.getTotalDescuento();
		this.totalNeto= this.modeloReciboHaberes.getTotalNeto();
		this.actualizarVistaTotalesGenerales();
		
	}
	

	private void eliminar() {
		int seleccionado= this.tblLiquidacionesHaberes.getSelectedRow();
		ReciboSueldo locRecibo= this.modeloReciboHaberes.getReciboSueldo(seleccionado);
		
		String pMensaje= "¿Realmente desea eliminar el recibo de haberes correspondiente a "+locRecibo.getPersona().getNombreYApellido()+" ("+locRecibo.getPersona().getLegajo()+") de esta liquidacón?";
		String pTitulo= "Eliminar Recibo de Haberes";
		int locConfirm= JOptionPane.showConfirmDialog(this, pMensaje, pTitulo, JOptionPane.YES_NO_OPTION);
		if(locConfirm==JOptionPane.YES_OPTION){
			this.listaReciboSueldo.remove(seleccionado);
			
			this.modeloReciboHaberes= new TblDetalleLiquidacionHaberesModel(this.listaReciboSueldo);
		
			this.tblLiquidacionesHaberes.setModel(this.modeloReciboHaberes);
			this.lblEditar.setEnabled(false);
			this.lblEliminar.setEnabled(false);
		
			this.modeloReciboHaberes.calcularTotalesRecibo();
			this.totalHaberes= this.modeloReciboHaberes.getTotalHaberes();
			this.totalDescuentos= this.modeloReciboHaberes.getTotalDescuento();
			this.totalNeto= this.modeloReciboHaberes.getTotalNeto();
			this.actualizarVistaTotalesGenerales();
		}	
	}
	
	
	private void actualizarVistaTotalesGenerales(){
		this.txtTotalHaberes.setText(this.totalHaberes.toString());
		this.txtTotalDescuentos.setText(this.totalDescuentos.toString());
		this.txtTotalNeto.setText(this.totalNeto.toString());
	}
	
}
