/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PnlAMPlantilla.java
 *
 * Created on 23/12/2011, 23:06:20
 */
package ar.gov.cjpmv.prestamos.gui.sueldos;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


import ar.gov.cjpmv.prestamos.core.business.dao.CategoriaDAO;
import ar.gov.cjpmv.prestamos.core.business.exceptions.LogicaException;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.ConceptoHaberes;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.Plantilla;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.TipoLiquidacion;
import ar.gov.cjpmv.prestamos.gui.AdministracionFactory;
import ar.gov.cjpmv.prestamos.gui.creditos.cobros.porbanco.models.TblDetalleCobro;
import ar.gov.cjpmv.prestamos.gui.sueldos.model.TblDetallePlantillaModel;

/**
 *
 * @author daiana
 */
public class PnlAMPlantilla extends javax.swing.JPanel {

	private AdminSueldosView adminSueldo;
	private Plantilla plantilla;
	private DefaultComboBoxModel modeloTipoLiquidacion;
	private AdministracionFactory adminFactory;
	private TblDetallePlantillaModel detallePlantillaModelo;
	
	
	private List<ConceptoHaberes> listaConceptoHaberes;
	private List<ConceptoHaberes> listaDetallePlantilla;
	private TipoLiquidacion tipoLiquidacion;
	
	
	
    public PnlAMPlantilla(AdminSueldosView adminSueldosView) {
    	 initComponents();
         this.adminSueldo= adminSueldosView;
         this.adminFactory= AdministracionFactory.getInstance();
         this.plantilla= new Plantilla();
         this.inicializarEventos();
         this.inicializarModelo();
         this.inicializarVista();
	}



	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTituloPnlDcha = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlListaConcepto1 = new ar.gov.cjpmv.prestamos.gui.sueldos.PnlListaConcepto();
        pnlPlantilla1 = new ar.gov.cjpmv.prestamos.gui.sueldos.PnlPlantilla();
        xtsTitulo = new org.jdesktop.swingx.JXTitledSeparator();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.gov.cjpmv.prestamos.gui.Principal.class).getContext().getResourceMap(PnlAMPlantilla.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N

        lblTituloPnlDcha.setFont(resourceMap.getFont("lblTituloPnlDcha.font")); // NOI18N
        lblTituloPnlDcha.setForeground(resourceMap.getColor("lblTituloPnlDcha.foreground")); // NOI18N
        lblTituloPnlDcha.setIcon(resourceMap.getIcon("lblTituloPnlDcha.icon")); // NOI18N
        lblTituloPnlDcha.setText(resourceMap.getString("lblTituloPnlDcha.text")); // NOI18N
        lblTituloPnlDcha.setName("lblTituloPnlDcha"); // NOI18N

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        btnGuardar.setIcon(resourceMap.getIcon("btnGuardar.icon")); // NOI18N
        btnGuardar.setText(resourceMap.getString("btnGuardar.text")); // NOI18N
        btnGuardar.setMaximumSize(new java.awt.Dimension(121, 23));
        btnGuardar.setName("btnGuardar"); // NOI18N
        btnGuardar.setPreferredSize(new java.awt.Dimension(101, 23));

        btnCancelar.setIcon(resourceMap.getIcon("btnCancelar.icon")); // NOI18N
        btnCancelar.setText(resourceMap.getString("btnCancelar.text")); // NOI18N
        btnCancelar.setName("btnCancelar"); // NOI18N

        jSplitPane1.setMinimumSize(new java.awt.Dimension(657, 114));
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        pnlListaConcepto1.setMinimumSize(new java.awt.Dimension(350, 104));
        pnlListaConcepto1.setName("pnlListaConcepto1"); // NOI18N
        jSplitPane1.setLeftComponent(pnlListaConcepto1);

        pnlPlantilla1.setName("pnlPlantilla1"); // NOI18N
        pnlPlantilla1.setPreferredSize(new java.awt.Dimension(600, 336));
        jSplitPane1.setRightComponent(pnlPlantilla1);

        xtsTitulo.setForeground(resourceMap.getColor("xtsTitulo.foreground")); // NOI18N
        xtsTitulo.setFont(resourceMap.getFont("xtsTitulo.font")); // NOI18N
        xtsTitulo.setName("xtsTitulo"); // NOI18N
        xtsTitulo.setTitle(resourceMap.getString("xtsTitulo.title")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                            .addComponent(xtsTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xtsTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTituloPnlDcha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTituloPnlDcha)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblTituloPnlDcha;
    private ar.gov.cjpmv.prestamos.gui.sueldos.PnlListaConcepto pnlListaConcepto1;
    private ar.gov.cjpmv.prestamos.gui.sueldos.PnlPlantilla pnlPlantilla1;
    private org.jdesktop.swingx.JXTitledSeparator xtsTitulo;
    // End of variables declaration//GEN-END:variables
    
    
    
	public void setPlantilla(Plantilla plantilla) {
		this.plantilla= plantilla;
		this.inicializarModelo();
		this.inicializarVista();
	}


	private void inicializarVista() {
		this.pnlListaConcepto1.getBtnAgregar().setEnabled(false);
		this.pnlPlantilla1.getLblQuitar().setEnabled(false);
		this.pnlPlantilla1.getCbxTipoLiquidacion().setModel(this.modeloTipoLiquidacion);
		if(this.plantilla.getId()!=null){
			this.pnlPlantilla1.getCbxTipoLiquidacion().setSelectedItem(this.tipoLiquidacion);
			this.pnlPlantilla1.getCbxTipoLiquidacion().setEditable(false);
			this.pnlPlantilla1.getCbxTipoLiquidacion().setEnabled(false);
		}
		else{
			this.pnlPlantilla1.getCbxTipoLiquidacion().setSelectedItem(TipoLiquidacion.ACTIVO_NORMAL);
			this.pnlPlantilla1.getCbxTipoLiquidacion().setEditable(true);
			this.pnlPlantilla1.getCbxTipoLiquidacion().setEnabled(true);
		}
		this.pnlPlantilla1.getTblPlantilla().setModel(this.detallePlantillaModelo);
		if(this.listaConceptoHaberes!=null){
			this.pnlListaConcepto1.getLtConcepto().setListData(this.listaConceptoHaberes.toArray());
		}
		 this.pnlPlantilla1.getCbxTipoLiquidacion().setRenderer(new TipoLiquidacionCellRenderer());
	}


	private void inicializarModelo() {
		this.modeloTipoLiquidacion = new DefaultComboBoxModel(TipoLiquidacion.values());
		List<ConceptoHaberes> conceptosPlantilla = this.adminFactory
				.getAdministracionConceptoHaberes()
				.getConceptosPlantilla();
		if(conceptosPlantilla !=null && !conceptosPlantilla.isEmpty()) {
			this.listaConceptoHaberes = conceptosPlantilla;
		}
		else{
			this.listaConceptoHaberes = new ArrayList<ConceptoHaberes>();
		}
		
		if( this.plantilla.getId() != null ) {
			this.tipoLiquidacion = this.plantilla.getTipoLiquidacion();
		}
		else{
			this.tipoLiquidacion= null;
		}
		
		if(this.plantilla.getListaConceptos()!=null && !this.plantilla.getListaConceptos().isEmpty()) {
			this.listaDetallePlantilla = this.plantilla.getListaConceptos();
			listaConceptoHaberes.removeAll(listaDetallePlantilla);
		}
		else{
			this.listaDetallePlantilla= new ArrayList<ConceptoHaberes>();
		}

		this.detallePlantillaModelo= new TblDetallePlantillaModel(this.listaDetallePlantilla);
	}
    

    private void inicializarEventos() {
    	this.pnlListaConcepto1.getLtConcepto().addMouseListener(new MouseAdapter(){
			public void mouseClicked(MouseEvent e) {
				if (pnlListaConcepto1.getLtConcepto()!=null){
					if ((!pnlListaConcepto1.getLtConcepto().isSelectionEmpty()) && (e.getClickCount()==2)){
						anadirConceptos();
					}
					else if ((!pnlListaConcepto1.getLtConcepto().isSelectionEmpty()) && (e.getClickCount()==1)){
						pnlListaConcepto1.getBtnAgregar().setEnabled(true);
					}
				}
			}
		});

		this.pnlListaConcepto1.getLtConcepto().addKeyListener(new KeyAdapter(){
			@Override
			public void keyPressed(KeyEvent e) {
				if (pnlListaConcepto1.getLtConcepto()!=null){
					if((!pnlListaConcepto1.getLtConcepto().isSelectionEmpty()) && e.getKeyCode() == KeyEvent.VK_ENTER){
						anadirConceptos();
					}
				}
			}

		});
		
		
		this.pnlListaConcepto1.getBtnAgregar().addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				anadirConceptos();
			}	
		});
		
		
		
		this.btnGuardar.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				guardar();
				
			}
		});
						
	
		this.pnlPlantilla1.getLblQuitar().addMouseListener(new MouseAdapter() {
		
			@Override
			public void mouseClicked(MouseEvent e) {
				quitarConceptos();
				
			}
		});
		
		
		
		this.btnCancelar.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				cancelar();	
			}
		});
		
		this.pnlPlantilla1.getTblPlantilla().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0){
				if(isSelectedRowConcepto()){
			    	pnlPlantilla1.getLblQuitar().setEnabled(true);
				}
			}

		});
		
		
	}
    
    
	private boolean isSelectedRowConcepto(){
		return this.pnlPlantilla1.getTblPlantilla().getSelectedRow() != -1;
	}
	

	private void anadirConceptos() {
		
		if(!this.pnlListaConcepto1.getLtConcepto().isSelectionEmpty()){
			Object[] listaSeleccionados = this.pnlListaConcepto1
					.getLtConcepto().getSelectedValues();
			
			List<ConceptoHaberes> agregados = new ArrayList<ConceptoHaberes>(listaSeleccionados.length);
			for (Object obj : listaSeleccionados) {
				agregados.add((ConceptoHaberes)obj);
			}
			listaDetallePlantilla.addAll(agregados);
			listaConceptoHaberes.removeAll(agregados);
			
			detallePlantillaModelo.setListaConceptos(listaDetallePlantilla);
			this.pnlListaConcepto1.getLtConcepto().setListData(listaConceptoHaberes.toArray());
		}
		else{
			String titulo= "Error";
			String mensaje="Debe seleccionar algún concepto de haberes para agregar.";
			JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.ERROR_MESSAGE);
		}
	}
	

	private void quitarConceptos() {
		int[] lineasSeleccionadas = this.pnlPlantilla1.getTblPlantilla().getSelectedRows();
		List<ConceptoHaberes> listaSeleccionada= this.detallePlantillaModelo.getListaDetalle(lineasSeleccionadas);
		this.listaDetallePlantilla.removeAll(listaSeleccionada);
		this.listaConceptoHaberes.addAll(listaSeleccionada);
		
		this.detallePlantillaModelo.setListaConceptos(listaDetallePlantilla);
		this.pnlListaConcepto1.getLtConcepto().setListData(listaConceptoHaberes.toArray());
	}

	
	private void guardar(){
		try{
			this.actualizarModelo();
			String mensaje= "";
			String titulo= "";
			if(this.plantilla.getId()==null){
				this.adminFactory.getAdministracionPlantilla().agregar(this.plantilla);
				mensaje="Los datos se han guardado correctamente";
				 titulo="Nuevo Plantilla";
			}
			else{
				this.adminFactory.getAdministracionPlantilla().modificar(this.plantilla);
				mensaje="Los datos se han modificado correctamente";
				titulo="Editar Plantilla";
			}
			JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
			this.adminSueldo.mostrarAdminPlantilla();

		}
		catch(LogicaException e){
			JOptionPane.showMessageDialog(this, e.getMessage(), e.getTitulo(), JOptionPane.ERROR_MESSAGE);
		}
		
	}
	
	private void actualizarModelo() throws LogicaException {
		this.tipoLiquidacion= (TipoLiquidacion) this.pnlPlantilla1.getCbxTipoLiquidacion().getSelectedItem();
		
		
		this.plantilla.setTipoLiquidacion(this.tipoLiquidacion);
		if(this.listaDetallePlantilla==null || this.listaDetallePlantilla.isEmpty()){
			int codigo= 139;
			String campo= "conceptos de la plantilla";
			throw new LogicaException(codigo, campo);
		}
		else{
			
			String mensaje=null;
			if(tipoLiquidacion.equals(TipoLiquidacion.ACTIVO_NORMAL) || tipoLiquidacion.equals(TipoLiquidacion.ACTIVO_SAC)){
				ConceptoHaberes concNominalJub= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(4);
				ConceptoHaberes concNominalPen= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(5);
				if(this.listaDetallePlantilla.contains(concNominalJub)){
					this.listaDetallePlantilla.remove(concNominalJub);
					mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
					mensaje+= "\n -"+concNominalJub.toString()+"; ";
				}
				if(this.listaDetallePlantilla.contains(concNominalPen)){
					this.listaDetallePlantilla.remove(concNominalPen);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concNominalPen.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concNominalPen.toString()+"; ";
					}
				}
			}
			else if(this.tipoLiquidacion.equals(TipoLiquidacion.JUBILACION_NORMAL) || (this.tipoLiquidacion.equals(TipoLiquidacion.JUBILACION_SAC))){
				ConceptoHaberes concBasico= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(1);
				ConceptoHaberes concNominalPen= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(5);
				ConceptoHaberes concAntiguedad= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(3);
				ConceptoHaberes concPermanencia= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(2);
				
				if(this.listaDetallePlantilla.contains(concBasico)){
					this.listaDetallePlantilla.remove(concBasico);
					mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
					mensaje+= "\n -"+concBasico.toString()+"; ";
				}
				if(this.listaDetallePlantilla.contains(concNominalPen)){
					this.listaDetallePlantilla.remove(concNominalPen);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concNominalPen.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concNominalPen.toString()+"; ";
					}
				}	
				if(this.listaDetallePlantilla.contains(concPermanencia)){
					this.listaDetallePlantilla.remove(concPermanencia);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concPermanencia.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concPermanencia.toString()+"; ";
					}
				}
				if(this.listaDetallePlantilla.contains(concAntiguedad)){
					this.listaDetallePlantilla.remove(concAntiguedad);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concAntiguedad.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concAntiguedad.toString()+"; ";
					}
				}
			}
			else if(this.tipoLiquidacion.equals(TipoLiquidacion.PENSION_NORMAL) || (this.tipoLiquidacion.equals(TipoLiquidacion.PENSION_SAC))){
				ConceptoHaberes concBasico= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(1);
				ConceptoHaberes concNominalJub= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(4);
				ConceptoHaberes concAntiguedad= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(3);
				ConceptoHaberes concPermanencia= this.adminFactory.getAdministracionConceptoHaberes().getConceptoPorCodigo(2);
				if(this.listaDetallePlantilla.contains(concBasico)){
					this.listaDetallePlantilla.remove(concBasico);
					mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
					mensaje+= "\n -"+concBasico.toString()+"; ";
				}
				if(this.listaDetallePlantilla.contains(concNominalJub)){
					this.listaDetallePlantilla.remove(concNominalJub);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concNominalJub.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concNominalJub.toString()+"; ";
					}
				}	
				if(this.listaDetallePlantilla.contains(concPermanencia)){
					this.listaDetallePlantilla.remove(concPermanencia);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concPermanencia.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concPermanencia.toString()+"; ";
					}
				}
				if(this.listaDetallePlantilla.contains(concAntiguedad)){
					this.listaDetallePlantilla.remove(concAntiguedad);
					if(mensaje==null){
						mensaje= "Error. Algunos conceptos no se corresponden con la plantilla.\nNo se pudieron agregar los siguientes conceptos: ";
						mensaje+= "\n -"+concAntiguedad.toString()+"; ";
					}
					else{
						mensaje+= "\n -"+concAntiguedad.toString()+"; ";
					}
				}
			}
			if(mensaje!=null){
				JOptionPane.showMessageDialog(this, mensaje, "Alerta", JOptionPane.WARNING_MESSAGE);
				this.detallePlantillaModelo= new TblDetallePlantillaModel(this.listaDetallePlantilla);
				this.pnlPlantilla1.getTblPlantilla().setModel(this.detallePlantillaModelo);
			}
			if(this.listaDetallePlantilla.isEmpty()){
				int codigo= 139;
				String campo= "conceptos de la plantilla";
				throw new LogicaException(codigo, campo);
		
				
			}
			else{
				this.plantilla.setListaConceptos(this.listaDetallePlantilla);
			}
		}
	}



	private void cancelar() {
		this.adminSueldo.mostrarAdminPlantilla();
	}
	

	
}
