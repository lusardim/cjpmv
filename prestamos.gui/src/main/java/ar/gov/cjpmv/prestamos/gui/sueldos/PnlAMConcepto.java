/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PnlAMConcepto.java
 *
 * Created on 23/12/2011, 21:50:39
 */
package ar.gov.cjpmv.prestamos.gui.sueldos;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListDataListener;

import ar.gov.cjpmv.prestamos.core.business.dao.CategoriaDAO;
import ar.gov.cjpmv.prestamos.core.business.exceptions.LogicaException;
import ar.gov.cjpmv.prestamos.core.persistence.PersonaFisica;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.Categoria;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.ConceptoFijo;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.ConceptoHaberes;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.ConceptoPorcentual;
import ar.gov.cjpmv.prestamos.core.persistence.sueldos.enums.TipoCodigo;
import ar.gov.cjpmv.prestamos.gui.AdministracionFactory;
import ar.gov.cjpmv.prestamos.gui.contable.AdminContableView;
import ar.gov.cjpmv.prestamos.gui.utiles.Utiles;

/**
 *
 * @author daiana
 */
public class PnlAMConcepto extends javax.swing.JPanel {

    /** Creates new form PnlAMConcepto */
	
	private static final String CATEGORIA_REVISTA = "Categoría de revista";
	private ConceptoHaberes conceptoHaberes;
	//private ConceptoFijo conceptoFijo;
	//private ConceptoPorcentual conceptoPorcentual;
	private AdminSueldosView adminSueldo;
	private AdministracionFactory adminFactory;
	
	
	private Integer codigo;
	private String descripcion;
	private TipoCodigo tipoCodigo;
	private boolean formaCalcPorcentual;
	private boolean formaCalcFijoGeneral;
	private boolean formaCalcFijoParticular;
	private DefaultComboBoxModel modeloCriterioAplicacion;
	private DefaultComboBoxModel modeloTipoCodigo;
	private List<Object> listaCriteriosAplicacion;
	private BigDecimal montoConcepto;
	private BigDecimal porcentajeConcepto;
	private Categoria categoriaAplicada;
	private TipoCodigo tipoCodigoAplicado;
	private CategoriaDAO categoriaDAO;

	
    
    
    public PnlAMConcepto(AdminSueldosView adminSueldoView) {
        initComponents();
        this.adminSueldo= adminSueldoView;
        this.adminFactory= AdministracionFactory.getInstance();
        this.categoriaDAO= new CategoriaDAO();
        this.inicializarEventos();
        this.inicializarModelo();
        this.inicializarVista();
    }

  
	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbtnFormaCalculo = new javax.swing.ButtonGroup();
        lblTituloPnlDcha = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pnlParametrosBusqueda = new javax.swing.JPanel();
        lblCodigo = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        xtsTitulo = new org.jdesktop.swingx.JXTitledSeparator();
        lblDescripcion = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        lblDescripcion1 = new javax.swing.JLabel();
        cbxTipoConcepto = new javax.swing.JComboBox();
        rbtnImporteFijo = new javax.swing.JRadioButton();
        rbtnImporteParticular = new javax.swing.JRadioButton();
        txtImporteFijo = new javax.swing.JTextField();
        xtsTitulo1 = new org.jdesktop.swingx.JXTitledSeparator();
        rbtnPorcentajeFijo = new javax.swing.JRadioButton();
        lblDescripcion2 = new javax.swing.JLabel();
        cbxAplicacion = new javax.swing.JComboBox();
        txtPorcentajeFijo = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.gov.cjpmv.prestamos.gui.Principal.class).getContext().getResourceMap(PnlAMConcepto.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N

        lblTituloPnlDcha.setFont(resourceMap.getFont("lblTituloPnlDcha.font")); // NOI18N
        lblTituloPnlDcha.setForeground(resourceMap.getColor("lblTituloPnlDcha.foreground")); // NOI18N
        lblTituloPnlDcha.setText(resourceMap.getString("lblTituloPnlDcha.text")); // NOI18N
        lblTituloPnlDcha.setName("lblTituloPnlDcha"); // NOI18N

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        pnlParametrosBusqueda.setName("pnlParametrosBusqueda"); // NOI18N

        lblCodigo.setFont(resourceMap.getFont("lblCodigo.font")); // NOI18N
        lblCodigo.setForeground(resourceMap.getColor("lblCodigo.foreground")); // NOI18N
        lblCodigo.setText(resourceMap.getString("lblCodigo.text")); // NOI18N
        lblCodigo.setName("lblCodigo"); // NOI18N

        txtCodigo.setName("txtCodigo"); // NOI18N

        xtsTitulo.setForeground(resourceMap.getColor("xtsTitulo.foreground")); // NOI18N
        xtsTitulo.setFont(resourceMap.getFont("xtsTitulo.font")); // NOI18N
        xtsTitulo.setName("xtsTitulo"); // NOI18N
        xtsTitulo.setTitle(resourceMap.getString("xtsTitulo.title")); // NOI18N

        lblDescripcion.setFont(resourceMap.getFont("lblDescripcion.font")); // NOI18N
        lblDescripcion.setForeground(resourceMap.getColor("lblDescripcion.foreground")); // NOI18N
        lblDescripcion.setText(resourceMap.getString("lblDescripcion.text")); // NOI18N
        lblDescripcion.setName("lblDescripcion"); // NOI18N

        txtDescripcion.setName("txtDescripcion"); // NOI18N

        lblDescripcion1.setFont(resourceMap.getFont("lblDescripcion1.font")); // NOI18N
        lblDescripcion1.setForeground(resourceMap.getColor("lblDescripcion1.foreground")); // NOI18N
        lblDescripcion1.setText(resourceMap.getString("lblDescripcion1.text")); // NOI18N
        lblDescripcion1.setName("lblDescripcion1"); // NOI18N

        cbxTipoConcepto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Remunerativo", "No Remunerativo", "Descuento", "Asignación" }));
        cbxTipoConcepto.setName("cbxTipoConcepto"); // NOI18N

        rbtnFormaCalculo.add(rbtnImporteFijo);
        rbtnImporteFijo.setFont(resourceMap.getFont("rbtnImporteFijo.font")); // NOI18N
        rbtnImporteFijo.setForeground(resourceMap.getColor("rbtnImporteFijo.foreground")); // NOI18N
        rbtnImporteFijo.setText(resourceMap.getString("rbtnImporteFijo.text")); // NOI18N
        rbtnImporteFijo.setName("rbtnImporteFijo"); // NOI18N

        rbtnFormaCalculo.add(rbtnImporteParticular);
        rbtnImporteParticular.setFont(resourceMap.getFont("rbtnImporteParticular.font")); // NOI18N
        rbtnImporteParticular.setForeground(resourceMap.getColor("rbtnImporteParticular.foreground")); // NOI18N
        rbtnImporteParticular.setText(resourceMap.getString("rbtnImporteParticular.text")); // NOI18N
        rbtnImporteParticular.setName("rbtnImporteParticular"); // NOI18N

        txtImporteFijo.setName("txtImporteFijo"); // NOI18N

        xtsTitulo1.setForeground(resourceMap.getColor("xtsTitulo1.foreground")); // NOI18N
        xtsTitulo1.setFont(resourceMap.getFont("xtsTitulo1.font")); // NOI18N
        xtsTitulo1.setName("xtsTitulo1"); // NOI18N
        xtsTitulo1.setScrollableWidthHint(org.jdesktop.swingx.ScrollableSizeHint.NONE);
        xtsTitulo1.setTitle(resourceMap.getString("xtsTitulo1.title")); // NOI18N

        rbtnFormaCalculo.add(rbtnPorcentajeFijo);
        rbtnPorcentajeFijo.setFont(resourceMap.getFont("rbtnPorcentajeFijo.font")); // NOI18N
        rbtnPorcentajeFijo.setForeground(resourceMap.getColor("rbtnPorcentajeFijo.foreground")); // NOI18N
        rbtnPorcentajeFijo.setText(resourceMap.getString("rbtnPorcentajeFijo.text")); // NOI18N
        rbtnPorcentajeFijo.setName("rbtnPorcentajeFijo"); // NOI18N

        lblDescripcion2.setFont(resourceMap.getFont("lblDescripcion2.font")); // NOI18N
        lblDescripcion2.setForeground(resourceMap.getColor("lblDescripcion2.foreground")); // NOI18N
        lblDescripcion2.setText(resourceMap.getString("lblDescripcion2.text")); // NOI18N
        lblDescripcion2.setName("lblDescripcion2"); // NOI18N

        cbxAplicacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Categoria 1", "Categoria 2", "Categoria de Revista", "Total de Remunerativos" }));
        cbxAplicacion.setName("cbxAplicacion"); // NOI18N

        txtPorcentajeFijo.setName("txtPorcentajeFijo"); // NOI18N

        javax.swing.GroupLayout pnlParametrosBusquedaLayout = new javax.swing.GroupLayout(pnlParametrosBusqueda);
        pnlParametrosBusqueda.setLayout(pnlParametrosBusquedaLayout);
        pnlParametrosBusquedaLayout.setHorizontalGroup(
            pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xtsTitulo1, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(xtsTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                            .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDescripcion1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(39, 39, 39)
                            .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cbxTipoConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtCodigo)
                                    .addComponent(txtDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))))
                        .addComponent(rbtnImporteParticular, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlParametrosBusquedaLayout.createSequentialGroup()
                            .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                                    .addComponent(rbtnPorcentajeFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPorcentajeFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                                    .addComponent(rbtnImporteFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtImporteFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                            .addComponent(lblDescripcion2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbxAplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlParametrosBusquedaLayout.setVerticalGroup(
            pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametrosBusquedaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xtsTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescripcion1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxTipoConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(xtsTitulo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnPorcentajeFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescripcion2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPorcentajeFijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlParametrosBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnImporteFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImporteFijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtnImporteParticular)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnGuardar.setIcon(resourceMap.getIcon("btnGuardar.icon")); // NOI18N
        btnGuardar.setText(resourceMap.getString("btnGuardar.text")); // NOI18N
        btnGuardar.setMaximumSize(new java.awt.Dimension(121, 23));
        btnGuardar.setName("btnGuardar"); // NOI18N
        btnGuardar.setPreferredSize(new java.awt.Dimension(101, 23));

        btnCancelar.setIcon(resourceMap.getIcon("btnCancelar.icon")); // NOI18N
        btnCancelar.setText(resourceMap.getString("btnCancelar.text")); // NOI18N
        btnCancelar.setName("btnCancelar"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlParametrosBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlParametrosBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTituloPnlDcha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTituloPnlDcha)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cbxAplicacion;
    private javax.swing.JComboBox cbxTipoConcepto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblDescripcion1;
    private javax.swing.JLabel lblDescripcion2;
    private javax.swing.JLabel lblTituloPnlDcha;
    private javax.swing.JPanel pnlParametrosBusqueda;
    private javax.swing.ButtonGroup rbtnFormaCalculo;
    private javax.swing.JRadioButton rbtnImporteFijo;
    private javax.swing.JRadioButton rbtnImporteParticular;
    private javax.swing.JRadioButton rbtnPorcentajeFijo;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtImporteFijo;
    private javax.swing.JTextField txtPorcentajeFijo;
    private org.jdesktop.swingx.JXTitledSeparator xtsTitulo;
    private org.jdesktop.swingx.JXTitledSeparator xtsTitulo1;
    // End of variables declaration//GEN-END:variables
    
    
    private void inicializarModelo() {
    	this.modeloTipoCodigo= new DefaultComboBoxModel(TipoCodigo.values());
    	
    	this.listaCriteriosAplicacion= new ArrayList<Object>();
    	this.listaCriteriosAplicacion.add(0,null);
    	List<Categoria> listaCategoria= this.categoriaDAO.findListaCategoria();
    	this.listaCriteriosAplicacion.add(CATEGORIA_REVISTA);
    	this.listaCriteriosAplicacion.addAll(listaCategoria);
    	this.listaCriteriosAplicacion.add(TipoCodigo.REMUNERATIVO);
    	
		this.modeloCriterioAplicacion= new DefaultComboBoxModel(this.listaCriteriosAplicacion.toArray());

    	this.formaCalcFijoGeneral= false;
    	this.formaCalcFijoParticular= false;
    	this.formaCalcPorcentual= false;
    	this.tipoCodigoAplicado= null;
    	this.categoriaAplicada= null;
    	this.montoConcepto= null;
    	this.porcentajeConcepto= null;
    	
		this.codigo= null;
		this.descripcion= null;
		this.tipoCodigo=null;
		this.tipoCodigoAplicado= null;
		this.categoriaAplicada= null;
    }
    
    private void actualizarVista() {
    	if(this.conceptoHaberes != null && this.conceptoHaberes.getId()!=null){
    		this.cbxTipoConcepto.setEnabled(false);
    		this.rbtnImporteFijo.setEnabled(false);
    		this.rbtnImporteParticular.setEnabled(false);
    		this.rbtnPorcentajeFijo.setEnabled(false);
    		actualizarFormaCalculo();
    		actualizarAtributos();
    		
  			this.txtCodigo.setText(this.codigo.toString());
   			this.txtDescripcion.setText(this.descripcion.toString());
   			this.cbxTipoConcepto.setSelectedItem(this.tipoCodigo);
    		this.rbtnImporteFijo.setSelected(this.formaCalcFijoGeneral);
    		
    		this.rbtnImporteParticular.setSelected(this.formaCalcFijoParticular);
    		this.rbtnPorcentajeFijo.setSelected(this.formaCalcPorcentual);
    		this.rbtnImporteFijo.setSelected(this.formaCalcFijoGeneral);

    		if(this.formaCalcFijoGeneral){
    			this.txtImporteFijo.setEnabled(true);
    			this.txtPorcentajeFijo.setEnabled(false);
    			this.txtPorcentajeFijo.setText("");
    			this.cbxAplicacion.setEnabled(false);
    			this.txtImporteFijo.setText(this.montoConcepto.toString());
    		}    	
    		else if(this.formaCalcPorcentual){
    			this.cbxAplicacion.setEnabled(false);
    			this.txtPorcentajeFijo.setEnabled(true);
    			this.txtPorcentajeFijo.setText(this.porcentajeConcepto.toString());
    			
    			this.txtImporteFijo.setEnabled(false);
    			this.txtImporteFijo.setText("");
    		}
    		else if (formaCalcFijoParticular) {
    			cbxAplicacion.setEnabled(false);
    			txtImporteFijo.setEnabled(false);
    			txtPorcentajeFijo.setEnabled(false);
    			txtPorcentajeFijo.setText("");
    			txtImporteFijo.setText("");
    			cbxAplicacion.setSelectedItem(null);
    		}

    		if(this.categoriaAplicada!=null){
    			Categoria locCategoria= this.categoriaDAO.getObjetoPorId(this.categoriaAplicada.getId());
    			this.cbxAplicacion.setSelectedItem(locCategoria);
    		}
    		else if(this.tipoCodigoAplicado!=null){
    			this.cbxAplicacion.setSelectedItem(this.tipoCodigoAplicado);
    		}
    		else {
    			this.cbxAplicacion.setSelectedItem(CATEGORIA_REVISTA);
    		}
    	}
    	else{
    		this.cbxTipoConcepto.setEnabled(true);
    		this.rbtnImporteFijo.setEnabled(true);
    		this.rbtnImporteParticular.setEnabled(true);
    		this.rbtnPorcentajeFijo.setEnabled(true);
    		this.rbtnPorcentajeFijo.setSelected(true);
    		this.txtPorcentajeFijo.setEnabled(true);
    		this.cbxAplicacion.setEnabled(true);
    		this.txtCodigo.setText("");
    		this.txtPorcentajeFijo.setText("");
    		this.txtImporteFijo.setText("");
			this.txtDescripcion.setText("");
			this.cbxTipoConcepto.setSelectedItem(TipoCodigo.REMUNERATIVO);
    	}
    }
    
    private void actualizarAtributos() {
    	this.codigo = conceptoHaberes.getCodigo();
		this.descripcion = conceptoHaberes.getDescripcion();
		this.tipoCodigo = conceptoHaberes.getTipoCodigo();
		if (conceptoHaberes instanceof ConceptoFijo) {
			ConceptoFijo concepto = (ConceptoFijo)conceptoHaberes;
			this.montoConcepto = concepto.getValor();
			this.tipoCodigoAplicado = null;
			this.porcentajeConcepto = null;
			this.categoriaAplicada = null;
		}
		else if (conceptoHaberes instanceof ConceptoPorcentual) {
			ConceptoPorcentual porcentual = (ConceptoPorcentual)conceptoHaberes;
			this.porcentajeConcepto = porcentual.getValor();	
			this.categoriaAplicada = porcentual.getSobreCategoria();
			this.tipoCodigoAplicado = porcentual.getSobreTotalTipo();
			this.montoConcepto = null;
		}
	}


	private void actualizarFormaCalculo() {
		if (conceptoHaberes instanceof ConceptoFijo) {
			ConceptoFijo concepto = (ConceptoFijo)conceptoHaberes;
			formaCalcFijoGeneral = concepto.isSobreescribirValor();
			formaCalcFijoParticular = !concepto.isSobreescribirValor();
			formaCalcPorcentual = false;
		}
		else if (conceptoHaberes instanceof ConceptoPorcentual) {
			formaCalcFijoGeneral = false;
			formaCalcFijoParticular = false;
			formaCalcPorcentual = true;
		}
	}


	private void inicializarVista() {
    	this.cbxTipoConcepto.setModel(this.modeloTipoCodigo);
    	this.cbxAplicacion.setModel(this.modeloCriterioAplicacion);
    	this.cbxAplicacion.setEnabled(false);
		this.txtImporteFijo.setEnabled(false);
		this.txtPorcentajeFijo.setEnabled(false);
  	}
    
    

  	private void inicializarEventos() {
  		this.btnGuardar.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				guardar();				
			}

		});
		this.btnCancelar.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				cancelar();
			}

		});
		
		this.rbtnPorcentajeFijo.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(rbtnPorcentajeFijo.isSelected()){
					txtPorcentajeFijo.setEnabled(true);
					cbxAplicacion.setEnabled(true);
					txtImporteFijo.setEnabled(false);
					txtImporteFijo.setText("");
				}
				else{
					cbxAplicacion.setEnabled(false);
					txtPorcentajeFijo.setEnabled(false);
					txtPorcentajeFijo.setText("");
				}
			}
		});
		

		this.rbtnImporteParticular.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(rbtnImporteParticular.isSelected()){
					cbxAplicacion.setEnabled(false);
					txtImporteFijo.setEnabled(false);
					txtImporteFijo.setText("");
					txtPorcentajeFijo.setText("");
					txtPorcentajeFijo.setEnabled(false);
				}
			}
		});
		
		this.rbtnImporteFijo.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if(rbtnImporteFijo.isSelected()){
					cbxAplicacion.setEnabled(false);
					txtImporteFijo.setEnabled(true);
					txtPorcentajeFijo.setText("");
					txtPorcentajeFijo.setEnabled(false);
				}
				else{
					txtImporteFijo.setEnabled(false);
					txtImporteFijo.setText("");
				}
			}
		});
		
  	}


	private void guardar() {
		try{
			this.actualizarModelo();
			if(this.conceptoHaberes.getId()==null){
				this.adminFactory.getAdministracionConceptoHaberes().agregar(this.conceptoHaberes);
				
				String mensaje="Los datos se han guardado correctamente";
				String titulo="Nuevo Concepto Haberes";
				JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
				this.adminSueldo.mostrarAdminConcepto();

			}
			else{
				this.adminFactory.getAdministracionConceptoHaberes().modificar(this.conceptoHaberes);
				String mensaje="Los datos se han modificado correctamente";
				String titulo="Editar Concepto Haberes";
				JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
				this.adminSueldo.mostrarAdminConcepto();
			}
		}
		catch(LogicaException e){
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, e.getMessage(), e.getTitulo(), JOptionPane.ERROR_MESSAGE);
		}
	
	}
	

	private void actualizarModelo() throws LogicaException {
		String cadenaCodigo= Utiles.nuloSiVacio(this.txtCodigo.getText());
		if(cadenaCodigo == null){
			int codigoError= 132;
			String campo= " código de concepto";
			throw new LogicaException(codigoError, campo);
		}
		else{		
			try{
				this.codigo= Integer.parseInt(cadenaCodigo);
			}
			catch(NumberFormatException e){
				int codigoError= 140;
				String campo= " código de concepto";
				throw new LogicaException(codigoError, campo);
			}
		}
		
		this.descripcion= Utiles.nuloSiVacio(this.txtDescripcion.getText());
		if(this.descripcion == null){
			int codigoError= 132;
			String campo= " descripción";
			throw new LogicaException(codigoError, campo);
		}
		
		this.tipoCodigo= (TipoCodigo) this.cbxTipoConcepto.getSelectedItem();
		if(this.tipoCodigo == null){
			int codigoError= 132;
			String campo= " tipo de cóodigo";
			throw new LogicaException(codigoError, campo);
		}


		this.formaCalcFijoGeneral= this.rbtnImporteFijo.isSelected();
		this.formaCalcFijoParticular= this.rbtnImporteParticular.isSelected();
		this.formaCalcPorcentual= this.rbtnPorcentajeFijo.isSelected();

		if(!this.formaCalcFijoGeneral && !this.formaCalcFijoParticular && !this.formaCalcPorcentual){
			int codigoError= 132;
			String campo= " forma de cálculo";
			throw new LogicaException(codigoError, campo);
		}
		else if(this.formaCalcFijoGeneral) {
			String cadenaImporteFijo= Utiles.nuloSiVacio(this.txtImporteFijo.getText());
			if(cadenaImporteFijo==null) {
				int codigoError= 132;
				String campo= " valor del importe";
				throw new LogicaException(codigoError, campo);
			}
			else {
				try{
					BigDecimal valorReal = new BigDecimal(cadenaImporteFijo);
					BigDecimal valorComparador= new BigDecimal("0.00");
					if(valorReal.compareTo(valorComparador)<=0){
						int codigoError= 36;
						String campo= "El valor para el campo valor del importe debe ser superior a cero.";
						throw new LogicaException(codigoError, campo);
					}
					else{
					
						this.montoConcepto= new BigDecimal(cadenaImporteFijo);
						if(this.conceptoHaberes == null){
							this.conceptoHaberes = new ConceptoFijo();
						}
						ConceptoFijo conceptoFijo = (ConceptoFijo) this.conceptoHaberes; 
						conceptoFijo.setCodigo(this.codigo);
						conceptoFijo.setDescripcion(this.descripcion);
						conceptoFijo.setTipoCodigo(this.tipoCodigo);
						conceptoFijo.setValor(this.montoConcepto);
						conceptoFijo.setSobreescribirValor(true);
					}
				}
				catch(NumberFormatException e){
					int codigoError= 140;
					String campo= " valor del importe";
					throw new LogicaException(codigoError, campo);
				}
			}
		}
		else if(this.formaCalcPorcentual) {
			String cadenaPorcentajeFijo= Utiles.nuloSiVacio(this.txtPorcentajeFijo.getText());
			if(cadenaPorcentajeFijo==null){
				int codigoError= 132;
				String campo= " valor del porcentaje";
				throw new LogicaException(codigoError, campo);
			}
			else{
				try{
					BigDecimal valorReal = new BigDecimal(cadenaPorcentajeFijo);
					BigDecimal valorComparador= new BigDecimal("0.00");
					if(valorReal.compareTo(valorComparador)<=0){
						int codigoError= 36;
						String campo= "El valor para el campo valor del porcentaje debe ser superior a cero.";
						throw new LogicaException(codigoError, campo);
					}
					else{
						this.porcentajeConcepto= new BigDecimal(cadenaPorcentajeFijo);
					}
				}
				catch(NumberFormatException e){
					int codigoError= 140;
					String campo= " valor del porcentaje";
					throw new LogicaException(codigoError, campo);
				}

				if(this.cbxAplicacion.getSelectedItem()==null){
					int codigoError= 132;
					String campo= " criterio de aplicación";
					throw new LogicaException(codigoError, campo);
				}
				else{

					if(this.conceptoHaberes == null){
						this.conceptoHaberes = new ConceptoPorcentual();
					}
					ConceptoPorcentual conceptoPorcentual = (ConceptoPorcentual)conceptoHaberes;
					
					conceptoPorcentual.setCodigo(this.codigo);
					conceptoPorcentual.setDescripcion(this.descripcion);
					conceptoPorcentual.setTipoCodigo(this.tipoCodigo);
					conceptoPorcentual.setValor(this.porcentajeConcepto);
					
					if(this.cbxAplicacion.getSelectedItem() instanceof Categoria){
						this.categoriaAplicada= (Categoria) this.cbxAplicacion.getSelectedItem();
						conceptoPorcentual.setSobreCategoria(this.categoriaAplicada);
					}
					else if (this.cbxAplicacion.getSelectedItem().equals(CATEGORIA_REVISTA)) {
						conceptoPorcentual.setSobreTotalTipo(null);
						conceptoPorcentual.setSobreCategoria(null);
					}
					else {
						if(this.tipoCodigo.equals(TipoCodigo.REMUNERATIVO)){
							int codigoError= 36;
							String campo= "Error al guardar el concepto. No es posible agregar un concepto con el tipo\nremunerativo y con forma de cálculo porcentual sobre remunerativo.";
							throw new LogicaException(codigoError, campo);
						}
						else{
							this.tipoCodigoAplicado= (TipoCodigo) this.cbxAplicacion.getSelectedItem();
							conceptoPorcentual.setSobreTotalTipo(this.tipoCodigoAplicado);
						}
					}
				}
			}
		}
		else if(this.formaCalcFijoParticular) {
			ConceptoFijo conceptoFijo = new ConceptoFijo(); 
			conceptoFijo.setCodigo(this.codigo);
			conceptoFijo.setDescripcion(this.descripcion);
			conceptoFijo.setTipoCodigo(this.tipoCodigo);
			conceptoFijo.setValor(null);
			conceptoFijo.setSobreescribirValor(false);
			this.conceptoHaberes = conceptoFijo;
		}

	}

	private void cancelar() {
		String locMensaje = "¿Está seguro que desea cancelar la operación?";
		int valor = JOptionPane.showConfirmDialog(this,locMensaje,"Cancelar", JOptionPane.YES_NO_OPTION);
		if (valor == JOptionPane.YES_OPTION) {
			this.adminSueldo.mostrarAdminConcepto();
		}		
	}
    
	public void setConcepto(ConceptoHaberes conceptoHaberes) throws LogicaException {
		this.conceptoHaberes = conceptoHaberes;
		this.actualizarVista();
	}


	public void nuevoConcepto() {
		this.conceptoHaberes = null;
		inicializarModelo();
		inicializarVista();
		actualizarVista();
	}
}
